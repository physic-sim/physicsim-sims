"use strict";
/*
 * ATTENTION: The "eval" devtool has been used (maybe by default in mode: "development").
 * This devtool is neither made for production nor for readable output files.
 * It uses "eval()" calls to create a separate source file in the browser devtools.
 * If you are trying to read the output file, select a different devtool (https://webpack.js.org/configuration/devtool/)
 * or disable the default devtool with "devtool: false".
 * If you are looking for production-ready output files, see mode: "production" (https://webpack.js.org/configuration/mode/).
 */
(self["webpackChunkphysicsim"] = self["webpackChunkphysicsim"] || []).push([["src_Simulations_ProjectileSimulation_js"],{

/***/ "./src/Input/NumInput.js":
/*!*******************************!*\
  !*** ./src/Input/NumInput.js ***!
  \*******************************/
/***/ ((__unused_webpack_module, __webpack_exports__, __webpack_require__) => {

eval("__webpack_require__.r(__webpack_exports__);\n/* harmony export */ __webpack_require__.d(__webpack_exports__, {\n/* harmony export */   NumInput: () => (/* binding */ NumInput)\n/* harmony export */ });\nclass NumInput {\n    base;\n    input;\n    disabled;\n\n    constructor(base, val, disabled = false, onClick = null) {\n        this.base = base;\n        this.disabled = disabled;\n        // construct html framework\n        let input = document.createElement('input');\n        input.classList.add('num-input-input');\n        if (disabled) {\n            input.classList.add('input-disabled');\n        }\n        input.disabled = disabled;\n\n        if (onClick !== null) {\n            this.base.addEventListener('click', onClick);\n        }\n\n        this.input = input;\n        this.input.type = 'number';\n        this.input.required = true;\n        this.input.value = Number(val);\n        base.appendChild(this.input);\n    }\n\n    get() {\n        return Number(this.input.value);\n    }\n\n    set(val) {\n        this.input.value = val;\n    }\n\n    toggleDisable() {\n        this.disabled = !this.disabled;\n        this.input.disabled = this.disabled;\n        if (this.disabled) {\n            this.input.classList.add('input-disabled');\n        } else {\n            this.input.classList.remove('input-disabled');\n        }\n    }\n}\n\n\n//# sourceURL=webpack://physicsim/./src/Input/NumInput.js?");

/***/ }),

/***/ "./src/Input/SliderInput.js":
/*!**********************************!*\
  !*** ./src/Input/SliderInput.js ***!
  \**********************************/
/***/ ((__unused_webpack_module, __webpack_exports__, __webpack_require__) => {

eval("__webpack_require__.r(__webpack_exports__);\n/* harmony export */ __webpack_require__.d(__webpack_exports__, {\n/* harmony export */   SliderInput: () => (/* binding */ SliderInput)\n/* harmony export */ });\nclass SliderInput {\n    base;\n    input;\n    min;\n    max;\n    label;\n    unit;\n    pLabel;\n\n    constructor(base, val, min, max, step, label, unit, update = true) {\n        this.base = base;\n        this.min = min;\n        this.max = max;\n        this.label = label;\n        this.unit = unit;\n\n        let container = document.createElement('div');\n        container.classList.add('slider-input-container');\n\n        this.pLabel = document.createElement('p');\n        if (update) {\n            this.pLabel.innerHTML = `${this.label} = ${val.toFixed(2)} ${this.unit}`;\n        } else {\n            this.pLabel.innerHTML = this.label;\n        }\n\n        this.input = document.createElement('input');\n        this.input.type = 'range';\n        this.input.min = this.min;\n        this.input.max = this.max;\n        this.input.value = val;\n        this.input.step = step;\n        this.input.classList.add('slider-input-slider');\n\n        container.append(this.pLabel, this.input);\n\n        this.base.append(container);\n\n        if (update) {\n            this.input.addEventListener('input', this.update.bind(this));\n        }\n    }\n\n    get() {\n        return parseFloat(this.input.value);\n    }\n\n    set(val) {\n        this.input.value = val;\n    }\n\n    update() {\n        this.pLabel.innerHTML = `${this.label} = ${this.get().toFixed(2)} ${this.unit}`;\n    }\n}\n\n\n//# sourceURL=webpack://physicsim/./src/Input/SliderInput.js?");

/***/ }),

/***/ "./src/Input/ValueInput.js":
/*!*********************************!*\
  !*** ./src/Input/ValueInput.js ***!
  \*********************************/
/***/ ((__unused_webpack_module, __webpack_exports__, __webpack_require__) => {

eval("__webpack_require__.r(__webpack_exports__);\n/* harmony export */ __webpack_require__.d(__webpack_exports__, {\n/* harmony export */   ValueInput: () => (/* binding */ ValueInput)\n/* harmony export */ });\n/* harmony import */ var _NumInput__WEBPACK_IMPORTED_MODULE_0__ = __webpack_require__(/*! ./NumInput */ \"./src/Input/NumInput.js\");\n\n\nclass ValueInput {\n    base;\n    val;\n    label;\n    unit;\n\n    constructor(base, val, label, unit, disabled = false, onClick = null) {\n        this.base = base;\n        this.label = label;\n        this.unit = unit;\n\n        // construct html framework\n        let container = document.createElement('div');\n        container.classList.add('value-input-container');\n\n        let pLabel = document.createElement('p');\n        pLabel.innerHTML = this.label;\n        pLabel.classList.add('value-input-text');\n\n        let pEqual = document.createElement('p');\n        pEqual.innerHTML = '=';\n        pLabel.classList.add('value-input-text');\n\n        let pUnit = document.createElement('p');\n        pUnit.innerHTML = this.unit;\n        pUnit.classList.add('value-input-text');\n\n        container.append(pLabel, pEqual);\n\n        this.val = new _NumInput__WEBPACK_IMPORTED_MODULE_0__.NumInput(container, val, disabled, onClick);\n\n        container.append(pUnit);\n\n        this.base.appendChild(container);\n    }\n\n    get() {\n        return this.val.get();\n    }\n\n    set(val) {\n        this.val.set(val);\n    }\n\n    toggleDisable() {\n        this.val.toggleDisable();\n    }\n}\n\n\n//# sourceURL=webpack://physicsim/./src/Input/ValueInput.js?");

/***/ }),

/***/ "./src/Input/VectorInput.js":
/*!**********************************!*\
  !*** ./src/Input/VectorInput.js ***!
  \**********************************/
/***/ ((__unused_webpack_module, __webpack_exports__, __webpack_require__) => {

eval("__webpack_require__.r(__webpack_exports__);\n/* harmony export */ __webpack_require__.d(__webpack_exports__, {\n/* harmony export */   VectorInput: () => (/* binding */ VectorInput)\n/* harmony export */ });\n/* harmony import */ var _assets_Input_VectorInput_left_vector_bracket_png__WEBPACK_IMPORTED_MODULE_0__ = __webpack_require__(/*! ../assets/Input/VectorInput/left-vector-bracket.png */ \"./src/assets/Input/VectorInput/left-vector-bracket.png\");\n/* harmony import */ var _assets_Input_VectorInput_right_vector_bracket_png__WEBPACK_IMPORTED_MODULE_1__ = __webpack_require__(/*! ../assets/Input/VectorInput/right-vector-bracket.png */ \"./src/assets/Input/VectorInput/right-vector-bracket.png\");\n/* harmony import */ var _NumInput__WEBPACK_IMPORTED_MODULE_2__ = __webpack_require__(/*! ./NumInput */ \"./src/Input/NumInput.js\");\n/* harmony import */ var p5__WEBPACK_IMPORTED_MODULE_3__ = __webpack_require__(/*! p5 */ \"./node_modules/p5/lib/p5.min-exposed.js\");\n/* harmony import */ var p5__WEBPACK_IMPORTED_MODULE_3___default = /*#__PURE__*/__webpack_require__.n(p5__WEBPACK_IMPORTED_MODULE_3__);\n\n\n\n\n\nclass VectorInput {\n    base;\n    x;\n    y;\n    z;\n    label;\n    unit;\n\n    constructor(base, x, y, z, label, unit, disabled = false, onClick = null) {\n        this.base = base;\n        this.label = label;\n        this.unit = unit;\n\n        // construct html framework\n        let container = document.createElement('div');\n        container.classList.add('vector-input-container');\n\n        if (onClick !== null) {\n            container.addEventListener('click', onClick);\n        }\n\n        let pLabel = document.createElement('p');\n        pLabel.innerHTML = `${this.label}`;\n        pLabel.classList.add('vector-input-label');\n\n        let pEqual = document.createElement('p');\n        pEqual.innerHTML = '=';\n        pLabel.classList.add('vector-input-text');\n\n        let pUnit = document.createElement('p');\n        pUnit.innerHTML = unit;\n        pUnit.classList.add('vector-input-text');\n\n        let iLeftBracket = document.createElement('img');\n        let iRightBracket = document.createElement('img');\n        iLeftBracket.classList.add('vector-input-bra');\n        iRightBracket.classList.add('vector-input-bra');\n\n        iLeftBracket.src = _assets_Input_VectorInput_left_vector_bracket_png__WEBPACK_IMPORTED_MODULE_0__;\n        iLeftBracket.draggable = false;\n        iRightBracket.src = _assets_Input_VectorInput_right_vector_bracket_png__WEBPACK_IMPORTED_MODULE_1__;\n        iRightBracket.draggable = false;\n\n        let inContainer = document.createElement('div');\n        inContainer.classList.add('vector-input-in-container');\n\n        this.x = new _NumInput__WEBPACK_IMPORTED_MODULE_2__.NumInput(inContainer, x, disabled);\n        this.y = new _NumInput__WEBPACK_IMPORTED_MODULE_2__.NumInput(inContainer, y, disabled);\n        this.z = new _NumInput__WEBPACK_IMPORTED_MODULE_2__.NumInput(inContainer, z, disabled);\n\n        container.append(\n            pLabel,\n            pEqual,\n            iLeftBracket,\n            inContainer,\n            iRightBracket,\n            pUnit,\n        );\n\n        base.appendChild(container);\n    }\n\n    get() {\n        return new (p5__WEBPACK_IMPORTED_MODULE_3___default().Vector)(this.x.get(), -this.z.get(), this.y.get());\n    }\n\n    set(x, y, z) {\n        this.x.set(x);\n        this.y.set(y);\n        this.z.set(z);\n    }\n\n    toggleDisable() {\n        this.x.toggleDisable();\n        this.y.toggleDisable();\n        this.z.toggleDisable();\n    }\n}\n\n\n//# sourceURL=webpack://physicsim/./src/Input/VectorInput.js?");

/***/ }),

/***/ "./src/Simulations/ProjectileSimulation.js":
/*!*************************************************!*\
  !*** ./src/Simulations/ProjectileSimulation.js ***!
  \*************************************************/
/***/ ((__unused_webpack_module, __webpack_exports__, __webpack_require__) => {

eval("__webpack_require__.r(__webpack_exports__);\n/* harmony export */ __webpack_require__.d(__webpack_exports__, {\n/* harmony export */   \"default\": () => (/* binding */ ProjectileSimulation)\n/* harmony export */ });\n/* harmony import */ var _ThreeDSimulation__WEBPACK_IMPORTED_MODULE_0__ = __webpack_require__(/*! ./ThreeDSimulation */ \"./src/Simulations/ThreeDSimulation.js\");\n/* harmony import */ var _Input_ValueInput__WEBPACK_IMPORTED_MODULE_1__ = __webpack_require__(/*! ../Input/ValueInput */ \"./src/Input/ValueInput.js\");\n/* harmony import */ var _Input_VectorInput__WEBPACK_IMPORTED_MODULE_2__ = __webpack_require__(/*! ../Input/VectorInput */ \"./src/Input/VectorInput.js\");\n/* harmony import */ var _Input_SliderInput__WEBPACK_IMPORTED_MODULE_3__ = __webpack_require__(/*! ../Input/SliderInput */ \"./src/Input/SliderInput.js\");\n/* harmony import */ var chart_js_auto__WEBPACK_IMPORTED_MODULE_4__ = __webpack_require__(/*! chart.js/auto */ \"./node_modules/chart.js/auto/auto.js\");\n/* harmony import */ var p5__WEBPACK_IMPORTED_MODULE_5__ = __webpack_require__(/*! p5 */ \"./node_modules/p5/lib/p5.min-exposed.js\");\n/* harmony import */ var p5__WEBPACK_IMPORTED_MODULE_5___default = /*#__PURE__*/__webpack_require__.n(p5__WEBPACK_IMPORTED_MODULE_5__);\n\n\n\n\n\n\n\nclass ProjectileSimulation extends _ThreeDSimulation__WEBPACK_IMPORTED_MODULE_0__.ThreeDSimulation {\n    e = 1;\n    G = 9.81;\n    size = 250;\n\n    constructor(container, inputs, graphs, controls, attributes) {\n        super(container, inputs, graphs, controls, attributes);\n\n        // add inputs\n        this.mass = new _Input_ValueInput__WEBPACK_IMPORTED_MODULE_1__.ValueInput(this.inputWrapper, 2, 'mass', 'kg');\n\n        this.u = new _Input_VectorInput__WEBPACK_IMPORTED_MODULE_2__.VectorInput(this.inputWrapper, 0, 0, 10, 'u', 'm/s');\n\n        this.s = new _Input_VectorInput__WEBPACK_IMPORTED_MODULE_2__.VectorInput(this.inputWrapper, 0, 0, 20, 's', 'm');\n\n        this.eInput = new _Input_SliderInput__WEBPACK_IMPORTED_MODULE_3__.SliderInput(\n            this.inputWrapper,\n            1,\n            0,\n            1,\n            0.01,\n            'Coeffecient of Resitution',\n            '',\n        );\n\n        this.sizeInput = new _Input_SliderInput__WEBPACK_IMPORTED_MODULE_3__.SliderInput(\n            this.inputWrapper,\n            this.size,\n            10,\n            500,\n            1,\n            'Simulation Size',\n            'm',\n        );\n\n        // init data and graphs\n        this.data = {};\n        this.sGraph = this.makeGraph();\n        this.vGraph = this.makeGraph();\n        this.aGraph = this.makeGraph();\n        this.sChart = this.initChart(\n            this.sGraph,\n            'Displacement-Time (z-direction)',\n            's (m)',\n        );\n        this.vChart = this.initChart(\n            this.vGraph,\n            'Velocity-Time (z-direction)',\n            'v (m/s)',\n        );\n        this.aChart = this.initChart(\n            this.aGraph,\n            'Acceleration-Time (z-direction)',\n            'a (m/s²)',\n        );\n    }\n\n    init(p) {\n        this.paused = false;\n\n        // init data\n        this.data.t = [];\n        this.data.s = [];\n        this.data.v = [];\n        this.data.a = [];\n        this.start = p.millis();\n\n        // get e input\n        this.e = this.eInput.get();\n\n        // get size input\n        this.size = this.sizeInput.get();\n\n        // init particle\n        this.a = p.createVector(0, this.G, 0);\n        this.particle = new Particle(\n            Math.abs(this.mass.get()),\n            this.s.get(),\n            this.u.get(),\n            p.createVector(0, this.G, 0),\n        );\n    }\n\n    frame(p) {\n        if (this.rotateControl) {\n            p.orbitControl();\n        }\n        p.perspective(0.4, this.width / this.height, 10, 500000);\n        p.ambientLight(150);\n\n        // draw floor\n        p.push();\n        p.noStroke();\n        p.translate(0, 2, 0);\n        p.fill(255, 200, 200, 100);\n        p.pop();\n\n        for (let i = 0 - this.size; i <= this.size; i += 20) {\n            p.push();\n            p.stroke(255, 255, 255, 75);\n            p.line(i, 0, -this.size, i, 0, this.size);\n            p.line(-this.size, 0, i, this.size, 0, i);\n            p.pop();\n        }\n\n        // update particle based on playing state\n        if (!this.paused) {\n            this.particle.update(p, this.e);\n        }\n\n        this.particle.show(p);\n\n        // pause simulation when particle's y velocity is 0 or falls outside of sim size\n        if (this.particle.vel.y == 0) {\n            this.pause = true;\n        }\n\n        if (\n            this.particle.pos.x < -this.size ||\n            this.particle.pos.x > this.size\n        ) {\n            this.paused = true;\n        }\n\n        if (\n            this.particle.pos.z < -this.size ||\n            this.particle.pos.z > this.size\n        ) {\n            this.paused = true;\n        }\n\n        // add data\n        let t = (p.millis() - this.start) * 0.001;\n\n        // keep data to 100 readings\n        if (this.data.t.length > 200) {\n            this.data.t.shift();\n            this.data.s.shift();\n            this.data.v.shift();\n            this.data.a.shift();\n        }\n\n        this.data.t.push(t);\n        this.data.s.push(this.particle.pos.y * -1);\n        this.data.v.push(this.particle.vel.y * -1);\n        this.data.a.push(this.particle.a.y * -1);\n\n        if (this.selected == 'graphs') {\n            this.graph();\n        }\n\n        this.updateAttributes();\n    }\n\n    graph() {\n        if (this.paused) return;\n\n        // update datasets\n        this.updateChart(this.sChart, this.data.t, this.data.s);\n        this.updateChart(this.vChart, this.data.t, this.data.v);\n        this.updateChart(this.aChart, this.data.t, this.data.a);\n    }\n\n    initChart(canvas, title, yLabel) {\n        return new chart_js_auto__WEBPACK_IMPORTED_MODULE_4__[\"default\"](canvas, {\n            type: 'line',\n            data: {\n                labels: [], // time data\n                datasets: [\n                    {\n                        label: title,\n                        data: [], // displacement, velocity, or acceleration data\n                        borderColor: '#6c46cc',\n                        borderWidth: 1,\n                        tension: 0.5, // smooth curve\n                        pointRadius: 1,\n                    },\n                ],\n            },\n            options: {\n                responsive: true,\n                maintainAspectRatio: true,\n                animation: false,\n                scales: {\n                    x: {\n                        type: 'linear',\n                        title: {\n                            display: true,\n                            text: 't/s',\n                            font: { family: 'CMUSerifRoman', size: 14 },\n                        },\n                        ticks: {\n                            callback: function (value, index, ticks) {\n                                // Format x-axis tick values to 2 decimal places\n                                return value.toFixed(2);\n                            },\n                        },\n                    },\n                    y: {\n                        title: {\n                            display: true,\n                            text: yLabel,\n                            font: { family: 'CMUSerifRoman', size: 14 },\n                        },\n                    },\n                },\n                plugins: {\n                    title: {\n                        display: true,\n                        text: title,\n                        font: { family: 'CMUSerifRoman', size: 16 },\n                        color: '#fff',\n                    },\n                    decimation: {\n                        enabled: true,\n                        algorithm: 'min-max',\n                        samples: 25,\n                    },\n                    legend: { display: false },\n                },\n                layout: { padding: { right: 0 } },\n                backgroundColor: '#1e1e1e',\n                color: '#fff',\n            },\n        });\n    }\n\n    updateChart(chart, labels, data) {\n        chart.data.labels = labels;\n        chart.data.datasets[0].data = data;\n        chart.update();\n    }\n\n    updateAttributes() {\n        this.attributeWrapper.innerHTML = `\n            s (x) = ${this.particle.pos.x.toFixed(2)} m <br>\n\t\t\tv (x) = ${this.particle.vel.x.toFixed(2)} m/s <br>\n\t\t\ta (x) = ${this.particle.a.x.toFixed(2)} m/s² <br> <br>\n            s (y) = ${this.particle.pos.z.toFixed(2)} m <br>\n\t\t\tv (y) = ${this.particle.vel.z.toFixed(2)} m/s <br>\n\t\t\ta (y) = ${this.particle.a.z.toFixed(2)} m/s² <br> <br>\n\t\t\ts (z) = ${-this.particle.pos.y.toFixed(2)} m <br>\n\t\t\tv (z) = ${-this.particle.vel.y.toFixed(2)} m/s <br>\n\t\t\ta (z) = ${-this.particle.a.y.toFixed(2)} m/s² <br>\n\t  \t`;\n    }\n}\n\nclass Particle {\n    constructor(mass, position, u, a) {\n        this.mass = mass;\n        this.pos = position;\n        this.vel = u;\n        this.a = a;\n        this.r = Math.sqrt(mass) * 4;\n\n        // define particle colour\n        this.colourR = 166;\n        this.colourG = 189;\n        this.colourB = 111;\n    }\n\n    update(p, e) {\n        // massless objects don't experience gravity\n        if (this.mass == 0) {\n            return;\n        }\n\n        // compute new position\n        let uT = p5__WEBPACK_IMPORTED_MODULE_5___default().Vector.mult(this.vel, 1 / p.getTargetFrameRate());\n        let aTSquared = p5__WEBPACK_IMPORTED_MODULE_5___default().Vector.mult(\n            this.a,\n            0.5 * Math.pow(1 / p.getTargetFrameRate(), 2),\n        );\n        let S = p5__WEBPACK_IMPORTED_MODULE_5___default().Vector.add(uT, aTSquared);\n        this.pos.add(S);\n\n        // compute new velocity\n        let Adt = p5__WEBPACK_IMPORTED_MODULE_5___default().Vector.mult(this.a, 1 / p.getTargetFrameRate());\n        this.vel.add(Adt);\n\n        if (this.pos.y > 0) {\n            // calculate velocity when this.pos.y == 0\n            let velAt0 = Math.sqrt(\n                Math.pow(this.vel.y, 2) - 2 * this.a.y * this.pos.y,\n            );\n            // prevent ball from going through ground\n            this.pos.y = 0;\n            this.vel.y = -velAt0 * e;\n        }\n    }\n\n    show(p) {\n        // draw sphere\n        p.push();\n        p.translate(this.pos);\n        p.noStroke();\n        p.fill(this.colourR, this.colourG, this.colourB);\n        p.sphere(this.r, 24, 24);\n        p.pop();\n\n        // draw velocity arrow\n        p.push();\n        p.translate(this.pos);\n        p.stroke(200, 200, 0);\n        p.strokeWeight(1.5);\n        p.line(0, 0, 0, this.vel.x, this.vel.y, this.vel.z);\n        p.pop();\n\n        p.push();\n        p.translate(p5__WEBPACK_IMPORTED_MODULE_5___default().Vector.add(this.pos, this.vel));\n        // rotate cone to be in line with the velocity line\n        let n = p5__WEBPACK_IMPORTED_MODULE_5___default().Vector.normalize(this.vel);\n\n        let xAxis = p.createVector(1, 0, 0);\n        let zAxis = p.createVector(0, 0, -1);\n        let rotationAxisZ = zAxis.cross(n);\n        let angleZ = p.acos(zAxis.dot(n));\n\n        // apply the rotation\n        if (rotationAxisZ.mag() > 0) {\n            p.rotate(angleZ, rotationAxisZ);\n            p.rotate(-p.PI / 2, xAxis);\n        }\n\n        p.fill(200, 200, 0);\n        p.noStroke();\n        p.cone(2, 4, 128, 1, true);\n    }\n}\n\n\n//# sourceURL=webpack://physicsim/./src/Simulations/ProjectileSimulation.js?");

/***/ }),

/***/ "./src/assets/Input/VectorInput/left-vector-bracket.png":
/*!**************************************************************!*\
  !*** ./src/assets/Input/VectorInput/left-vector-bracket.png ***!
  \**************************************************************/
/***/ ((module, __unused_webpack_exports, __webpack_require__) => {

eval("module.exports = __webpack_require__.p + \"assets/16879877791fff2b8023.png\";\n\n//# sourceURL=webpack://physicsim/./src/assets/Input/VectorInput/left-vector-bracket.png?");

/***/ }),

/***/ "./src/assets/Input/VectorInput/right-vector-bracket.png":
/*!***************************************************************!*\
  !*** ./src/assets/Input/VectorInput/right-vector-bracket.png ***!
  \***************************************************************/
/***/ ((module, __unused_webpack_exports, __webpack_require__) => {

eval("module.exports = __webpack_require__.p + \"assets/572218783a3b36e807cb.png\";\n\n//# sourceURL=webpack://physicsim/./src/assets/Input/VectorInput/right-vector-bracket.png?");

/***/ })

}]);