"use strict";
/*
 * ATTENTION: The "eval" devtool has been used (maybe by default in mode: "development").
 * This devtool is neither made for production nor for readable output files.
 * It uses "eval()" calls to create a separate source file in the browser devtools.
 * If you are trying to read the output file, select a different devtool (https://webpack.js.org/configuration/devtool/)
 * or disable the default devtool with "devtool: false".
 * If you are looking for production-ready output files, see mode: "production" (https://webpack.js.org/configuration/mode/).
 */
(self["webpackChunkphysicsim"] = self["webpackChunkphysicsim"] || []).push([["src_Simulations_ScatteringSimulation_js"],{

/***/ "./src/Input/NumInput.js":
/*!*******************************!*\
  !*** ./src/Input/NumInput.js ***!
  \*******************************/
/***/ ((__unused_webpack_module, __webpack_exports__, __webpack_require__) => {

eval("__webpack_require__.r(__webpack_exports__);\n/* harmony export */ __webpack_require__.d(__webpack_exports__, {\n/* harmony export */   NumInput: () => (/* binding */ NumInput)\n/* harmony export */ });\nclass NumInput {\n    base;\n    input;\n    disabled;\n\n    constructor(base, val, disabled = false, onClick = null) {\n        this.base = base;\n        this.disabled = disabled;\n        // construct html framework\n        let input = document.createElement('input');\n        input.classList.add('num-input-input');\n        if (disabled) {\n            input.classList.add('input-disabled');\n        }\n        input.disabled = disabled;\n\n        if (onClick !== null) {\n            this.base.addEventListener('click', onClick);\n        }\n\n        this.input = input;\n        this.input.type = 'number';\n        this.input.required = true;\n        this.input.value = Number(val);\n        base.appendChild(this.input);\n    }\n\n    get() {\n        return Number(this.input.value);\n    }\n\n    set(val) {\n        this.input.value = val;\n    }\n\n    toggleDisable() {\n        this.disabled = !this.disabled;\n        this.input.disabled = this.disabled;\n        if (this.disabled) {\n            this.input.classList.add('input-disabled');\n        } else {\n            this.input.classList.remove('input-disabled');\n        }\n    }\n}\n\n\n//# sourceURL=webpack://physicsim/./src/Input/NumInput.js?");

/***/ }),

/***/ "./src/Input/SliderInput.js":
/*!**********************************!*\
  !*** ./src/Input/SliderInput.js ***!
  \**********************************/
/***/ ((__unused_webpack_module, __webpack_exports__, __webpack_require__) => {

eval("__webpack_require__.r(__webpack_exports__);\n/* harmony export */ __webpack_require__.d(__webpack_exports__, {\n/* harmony export */   SliderInput: () => (/* binding */ SliderInput)\n/* harmony export */ });\nclass SliderInput {\n    base;\n    input;\n    min;\n    max;\n    label;\n    unit;\n    pLabel;\n\n    constructor(base, val, min, max, step, label, unit, update = true) {\n        this.base = base;\n        this.min = min;\n        this.max = max;\n        this.label = label;\n        this.unit = unit;\n\n        let container = document.createElement('div');\n        container.classList.add('slider-input-container');\n\n        this.pLabel = document.createElement('p');\n        if (update) {\n            this.pLabel.innerHTML = `${this.label} = ${val.toFixed(2)} ${this.unit}`;\n        } else {\n            this.pLabel.innerHTML = this.label;\n        }\n\n        this.input = document.createElement('input');\n        this.input.type = 'range';\n        this.input.min = this.min;\n        this.input.max = this.max;\n        this.input.value = val;\n        this.input.step = step;\n        this.input.classList.add('slider-input-slider');\n\n        container.append(this.pLabel, this.input);\n\n        this.base.append(container);\n\n        if (update) {\n            this.input.addEventListener('input', this.update.bind(this));\n        }\n    }\n\n    get() {\n        return parseFloat(this.input.value);\n    }\n\n    set(val) {\n        this.input.value = val;\n    }\n\n    update() {\n        this.pLabel.innerHTML = `${this.label} = ${this.get().toFixed(2)} ${this.unit}`;\n    }\n}\n\n\n//# sourceURL=webpack://physicsim/./src/Input/SliderInput.js?");

/***/ }),

/***/ "./src/Input/ValueInput.js":
/*!*********************************!*\
  !*** ./src/Input/ValueInput.js ***!
  \*********************************/
/***/ ((__unused_webpack_module, __webpack_exports__, __webpack_require__) => {

eval("__webpack_require__.r(__webpack_exports__);\n/* harmony export */ __webpack_require__.d(__webpack_exports__, {\n/* harmony export */   ValueInput: () => (/* binding */ ValueInput)\n/* harmony export */ });\n/* harmony import */ var _NumInput__WEBPACK_IMPORTED_MODULE_0__ = __webpack_require__(/*! ./NumInput */ \"./src/Input/NumInput.js\");\n\n\nclass ValueInput {\n    base;\n    val;\n    label;\n    unit;\n\n    constructor(base, val, label, unit, disabled = false, onClick = null) {\n        this.base = base;\n        this.label = label;\n        this.unit = unit;\n\n        // construct html framework\n        let container = document.createElement('div');\n        container.classList.add('value-input-container');\n\n        let pLabel = document.createElement('p');\n        pLabel.innerHTML = this.label;\n        pLabel.classList.add('value-input-text');\n\n        let pEqual = document.createElement('p');\n        pEqual.innerHTML = '=';\n        pLabel.classList.add('value-input-text');\n\n        let pUnit = document.createElement('p');\n        pUnit.innerHTML = this.unit;\n        pUnit.classList.add('value-input-text');\n\n        container.append(pLabel, pEqual);\n\n        this.val = new _NumInput__WEBPACK_IMPORTED_MODULE_0__.NumInput(container, val, disabled, onClick);\n\n        container.append(pUnit);\n\n        this.base.appendChild(container);\n    }\n\n    get() {\n        return this.val.get();\n    }\n\n    set(val) {\n        this.val.set(val);\n    }\n\n    toggleDisable() {\n        this.val.toggleDisable();\n    }\n}\n\n\n//# sourceURL=webpack://physicsim/./src/Input/ValueInput.js?");

/***/ }),

/***/ "./src/Simulations/ScatteringSimulation.js":
/*!*************************************************!*\
  !*** ./src/Simulations/ScatteringSimulation.js ***!
  \*************************************************/
/***/ ((__unused_webpack_module, __webpack_exports__, __webpack_require__) => {

eval("__webpack_require__.r(__webpack_exports__);\n/* harmony export */ __webpack_require__.d(__webpack_exports__, {\n/* harmony export */   \"default\": () => (/* binding */ ScatteringSimulation)\n/* harmony export */ });\n/* harmony import */ var _ThreeDSimulation__WEBPACK_IMPORTED_MODULE_0__ = __webpack_require__(/*! ./ThreeDSimulation */ \"./src/Simulations/ThreeDSimulation.js\");\n/* harmony import */ var _Input_ValueInput__WEBPACK_IMPORTED_MODULE_1__ = __webpack_require__(/*! ../Input/ValueInput */ \"./src/Input/ValueInput.js\");\n/* harmony import */ var _Input_SliderInput__WEBPACK_IMPORTED_MODULE_2__ = __webpack_require__(/*! ../Input/SliderInput */ \"./src/Input/SliderInput.js\");\n/* harmony import */ var p5__WEBPACK_IMPORTED_MODULE_3__ = __webpack_require__(/*! p5 */ \"./node_modules/p5/lib/p5.min-exposed.js\");\n/* harmony import */ var p5__WEBPACK_IMPORTED_MODULE_3___default = /*#__PURE__*/__webpack_require__.n(p5__WEBPACK_IMPORTED_MODULE_3__);\n\n\n\n\n\nclass ScatteringSimulation extends _ThreeDSimulation__WEBPACK_IMPORTED_MODULE_0__.ThreeDSimulation {\n    // physical constants\n    me = 9.1093837e-31;\n    mp = 1.67262192e-27;\n    e = 1.60217663e-19;\n\n    // sim constants\n    n = 4;\n    h = 150;\n    w = 150;\n\n    constructor(container, inputs, graphs, controls, attributes) {\n        super(container, inputs, graphs, controls, attributes);\n\n        // add inputs\n        this.mInput = new _Input_ValueInput__WEBPACK_IMPORTED_MODULE_1__.ValueInput(\n            this.inputWrapper,\n            79,\n            'Proton Number of Nucleus',\n            '',\n        )\n\n        this.uInput = new _Input_ValueInput__WEBPACK_IMPORTED_MODULE_1__.ValueInput(\n            this.inputWrapper,\n            1,\n            'Initial Electron Velocity',\n            'x10<sup>7</sup>/ms<sup>-1</sup>',\n        )\n\n        this.sizeInput = new _Input_SliderInput__WEBPACK_IMPORTED_MODULE_2__.SliderInput(\n            this.inputWrapper,\n            this.n,\n            0,\n            6,\n            1,\n            'No. Alpha Particles',\n            '',\n            false\n        );\n\n    }\n\n    init(p) {\n        // load inputs & do scaling\n        this.u = this.uInput.get() * 10;\n        let protonNumber = Math.floor(Math.abs(this.mInput.get()));\n        this.alphas = [];\n        this.n = this.sizeInput.get();\n\n        // init sim variables\n        this.nucleus = new Charge(\n            protonNumber * this.mp,\n            protonNumber * this.e,\n            p.createVector(0, 0, 0),\n            p.createVector(0, 0, 0),\n            p.createVector(0, 0, 0),\n        );\n\n        // add electrons\n        let useH = (this.h / 6) * this.n;\n        let useW = (this.w / 6) * this.n;\n\n        for (let i = -useH / 2; i <= useH / 2; i += Math.abs(this.h / 6)) {\n            for (let j = -useW / 2; j <= useW / 2; j += Math.abs(this.w / 6)) {\n                this.alphas.push(\n                    new Charge(2*this.mp, 2*this.e, p.createVector(-100, -i, j), p.createVector(this.u, 0, 0), p.createVector(0, 0, 0)),\n              );\n            }\n        }\n\n        // camera config\n        this.cam = p.createCamera();\n        this.cam.setPosition(200, 0, 700);\n        this.cam.lookAt(0, 0, 0);\n    }\n\n    frame(p) {\n        if (this.rotateControl) {\n            p.orbitControl();\n        }\n\n        p.perspective(0.25, this.width / this.height, 10, 500000);\n\n        // draw nucleus\n        this.nucleus.draw(p);\n\n        // draw alpha particles and update them\n        for (let i = 0; i < this.alphas.length; i++) {\n            this.alphas[i].draw(p);\n\n            if (this.nucleus.pos.dist(this.alphas[i].pos) < 10000) {\n                this.nucleus.field(this.alphas[i]);\n            }\n\n            if (!this.paused) {\n                this.alphas[i].update(p);\n            }\n        }\n    }\n}\n\nclass Charge {\n    E0 = 8.85418782e-12;\n\n    constructor(m, q, pos, v, a) {\n        this.m = m;\n        this.q = q;\n        this.pos = pos;\n        this.v = v;\n        this.a = a;\n        this.history = [];\n    }\n\n    update(p) {\n        this.v.add(this.a);\n        this.pos.add(p5__WEBPACK_IMPORTED_MODULE_3___default().Vector.mult(this.v, 1/p.getTargetFrameRate()));\n        this.history.push(this.pos.copy());\n    }\n    \n    field(c) {\n        let force =\n            (1 / (4 * Math.PI * this.E0)) *\n            (this.q * c.q) *\n            (1 / Math.pow(this.pos.dist(c.pos), 2));\n        let vec = p5__WEBPACK_IMPORTED_MODULE_3___default().Vector.sub(c.pos, this.pos).normalize();  \n        let a1 = p5__WEBPACK_IMPORTED_MODULE_3___default().Vector.mult(vec, (-1 / this.m) * force);\n        let a2 = p5__WEBPACK_IMPORTED_MODULE_3___default().Vector.mult(vec, (1 / c.m) * force);\n\n        this.a = a1;\n        c.a = a2;\n    }\n\n    draw(p) {\n        if (this.q > 0) {\n            p.fill('#a6bd6f');\n        } else {\n            p.fill('#9c6270');\n        }\n        p.noStroke();\n        p.push();\n        p.translate(this.pos);\n        p.sphere(Math.sqrt(this.m) * 0.5e13, 24, 24);\n        p.pop();\n\n        if (this.history.length > 30) {\n            this.history.shift();\n        }\n\n        for (let i = 0; i < this.history.length - 5; i += 4) {\n            p.stroke(255, 255, 255, 50 * (i / this.history.length));\n            p.strokeWeight(0.5);\n            p.push();\n            p.line(\n                this.history[i].x,\n                this.history[i].y,\n                this.history[i].z,\n                this.history[i+5].x,\n                this.history[i+5].y,\n                this.history[i+5].z,\n      )\n            p.pop();\n        }  \n    }\n}\n\n\n//# sourceURL=webpack://physicsim/./src/Simulations/ScatteringSimulation.js?");

/***/ })

}]);