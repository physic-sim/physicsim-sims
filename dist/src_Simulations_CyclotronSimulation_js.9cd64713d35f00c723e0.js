"use strict";
/*
 * ATTENTION: The "eval" devtool has been used (maybe by default in mode: "development").
 * This devtool is neither made for production nor for readable output files.
 * It uses "eval()" calls to create a separate source file in the browser devtools.
 * If you are trying to read the output file, select a different devtool (https://webpack.js.org/configuration/devtool/)
 * or disable the default devtool with "devtool: false".
 * If you are looking for production-ready output files, see mode: "production" (https://webpack.js.org/configuration/mode/).
 */
(self["webpackChunkphysicsim"] = self["webpackChunkphysicsim"] || []).push([["src_Simulations_CyclotronSimulation_js"],{

/***/ "./src/Input/NumInput.js":
/*!*******************************!*\
  !*** ./src/Input/NumInput.js ***!
  \*******************************/
/***/ ((__unused_webpack_module, __webpack_exports__, __webpack_require__) => {

eval("__webpack_require__.r(__webpack_exports__);\n/* harmony export */ __webpack_require__.d(__webpack_exports__, {\n/* harmony export */   NumInput: () => (/* binding */ NumInput)\n/* harmony export */ });\nclass NumInput {\n    base;\n    input;\n    disabled;\n\n    constructor(base, val, disabled = false, onClick = null) {\n        this.base = base;\n        this.disabled = disabled;\n        // construct html framework\n        let input = document.createElement('input');\n        input.classList.add('num-input-input');\n        if (disabled) {\n            input.classList.add('input-disabled');\n        }\n        input.disabled = disabled;\n\n        if (onClick !== null) {\n            this.base.addEventListener('click', onClick);\n        }\n\n        this.input = input;\n        this.input.type = 'number';\n        this.input.required = true;\n        this.input.value = Number(val);\n        base.appendChild(this.input);\n    }\n\n    get() {\n        return Number(this.input.value);\n    }\n\n    set(val) {\n        this.input.value = val;\n    }\n\n    toggleDisable() {\n        this.disabled = !this.disabled;\n        this.input.disabled = this.disabled;\n        if (this.disabled) {\n            this.input.classList.add('input-disabled');\n        } else {\n            this.input.classList.remove('input-disabled');\n        }\n    }\n}\n\n\n//# sourceURL=webpack://physicsim/./src/Input/NumInput.js?");

/***/ }),

/***/ "./src/Input/ValueInput.js":
/*!*********************************!*\
  !*** ./src/Input/ValueInput.js ***!
  \*********************************/
/***/ ((__unused_webpack_module, __webpack_exports__, __webpack_require__) => {

eval("__webpack_require__.r(__webpack_exports__);\n/* harmony export */ __webpack_require__.d(__webpack_exports__, {\n/* harmony export */   ValueInput: () => (/* binding */ ValueInput)\n/* harmony export */ });\n/* harmony import */ var _NumInput__WEBPACK_IMPORTED_MODULE_0__ = __webpack_require__(/*! ./NumInput */ \"./src/Input/NumInput.js\");\n\n\nclass ValueInput {\n    base;\n    val;\n    label;\n    unit;\n\n    constructor(base, val, label, unit, disabled = false, onClick = null) {\n        this.base = base;\n        this.label = label;\n        this.unit = unit;\n\n        // construct html framework\n        let container = document.createElement('div');\n        container.classList.add('value-input-container');\n\n        let pLabel = document.createElement('p');\n        pLabel.innerHTML = this.label;\n        pLabel.classList.add('value-input-text');\n\n        let pEqual = document.createElement('p');\n        pEqual.innerHTML = '=';\n        pLabel.classList.add('value-input-text');\n\n        let pUnit = document.createElement('p');\n        pUnit.innerHTML = this.unit;\n        pUnit.classList.add('value-input-text');\n\n        container.append(pLabel, pEqual);\n\n        this.val = new _NumInput__WEBPACK_IMPORTED_MODULE_0__.NumInput(container, val, disabled, onClick);\n\n        container.append(pUnit);\n\n        this.base.appendChild(container);\n    }\n\n    get() {\n        return this.val.get();\n    }\n\n    set(val) {\n        this.val.set(val);\n    }\n\n    toggleDisable() {\n        this.val.toggleDisable();\n    }\n}\n\n\n//# sourceURL=webpack://physicsim/./src/Input/ValueInput.js?");

/***/ }),

/***/ "./src/Simulations/CyclotronSimulation.js":
/*!************************************************!*\
  !*** ./src/Simulations/CyclotronSimulation.js ***!
  \************************************************/
/***/ ((__unused_webpack_module, __webpack_exports__, __webpack_require__) => {

eval("__webpack_require__.r(__webpack_exports__);\n/* harmony export */ __webpack_require__.d(__webpack_exports__, {\n/* harmony export */   \"default\": () => (/* binding */ CyclotronSimulation)\n/* harmony export */ });\n/* harmony import */ var _ThreeDSimulation__WEBPACK_IMPORTED_MODULE_0__ = __webpack_require__(/*! ./ThreeDSimulation */ \"./src/Simulations/ThreeDSimulation.js\");\n/* harmony import */ var _Input_ValueInput__WEBPACK_IMPORTED_MODULE_1__ = __webpack_require__(/*! ../Input/ValueInput */ \"./src/Input/ValueInput.js\");\n/* harmony import */ var chart_js_auto__WEBPACK_IMPORTED_MODULE_2__ = __webpack_require__(/*! chart.js/auto */ \"./node_modules/chart.js/auto/auto.js\");\n/* harmony import */ var p5__WEBPACK_IMPORTED_MODULE_3__ = __webpack_require__(/*! p5 */ \"./node_modules/p5/lib/p5.min-exposed.js\");\n/* harmony import */ var p5__WEBPACK_IMPORTED_MODULE_3___default = /*#__PURE__*/__webpack_require__.n(p5__WEBPACK_IMPORTED_MODULE_3__);\n\n\n\n\n\nclass CyclotronSimulation extends _ThreeDSimulation__WEBPACK_IMPORTED_MODULE_0__.ThreeDSimulation {\n    historyLimit = 500;\n    pauseStart;\n    d = 10;\n    timeScale = 1\n\n    constructor(container, inputs, graphs, controls, attributes) {\n        super(container, inputs, graphs, controls, attributes);\n\n        // add inputs\n        this.massInput = new _Input_ValueInput__WEBPACK_IMPORTED_MODULE_1__.ValueInput(\n            this.inputWrapper,\n            1.7,\n            'Mass',\n            'x10<sup>-27</sup>/kg',\n        );\n        this.chargeInput = new _Input_ValueInput__WEBPACK_IMPORTED_MODULE_1__.ValueInput(\n            this.inputWrapper,\n            1.6,\n            'Charge',\n            'x10<sup>-19</sup>/C',\n        );\n        this.magInput = new _Input_ValueInput__WEBPACK_IMPORTED_MODULE_1__.ValueInput(\n            this.inputWrapper,\n            1.2,\n            'Magnetic Flux Density',\n            'T',\n        );\n        this.pdInput = new _Input_ValueInput__WEBPACK_IMPORTED_MODULE_1__.ValueInput(\n            this.inputWrapper,\n            10000,\n            'Potential Difference',\n            'V',\n        );\n\n        // init data and graphs\n        this.data = {};\n        this.vGraph = this.makeGraph();\n        this.pdGraph = this.makeGraph();\n        this.sGraph = this.makeGraph();\n        this.vChart = this.initChart(this.vGraph, 'Speed-Time', 'v (m/s)');\n        this.pdChart = this.initChart(\n            this.pdGraph,\n            'Potential-Difference-Time',\n            'V (V)',\n        );\n        this.sChart = this.initChart(this.sGraph, 'Displacement(x)-Time', 'm');\n    }\n\n    init(p) {\n        // load inputs & do scaling\n        this.m = Math.abs(this.massInput.get());\n        this.q = this.chargeInput.get();\n        this.B = this.magInput.get();\n        this.V = this.pdInput.get() / 100;\n\n        // init data\n        this.data.t = [];\n        this.data.v = [];\n        this.data.pd = [];\n        this.data.s = [];\n        this.start = p.millis();\n\n        // init sim variables\n        this.pos = p.createVector(0, 0, 0);\n        this.v = p.createVector(1e-5, 0, 0);\n        this.history = [];\n    }\n\n    frame(p) {\n        if (this.rotateControl) {\n            p.orbitControl();\n        }\n\n        p.perspective(0.4, this.width / this.height, 10, 500000);\n\n        p.background(0);\n\n        let t = (p.millis() - this.start) / 1000 * this.timeScale; // simulation time\n        let T = Math.abs((2 * Math.PI * this.m) / (this.q * this.B)); // cyclotron period\n        let gapTime = T / 2; // half-period for electric field\n        let n = Math.abs(Math.floor(t / gapTime)) + 1; // number of half-cycles\n        let r = t % gapTime; // remainder\n\n        if (!this.paused) {\n            // calculate speed due to electric field interaction\n            let v0 = this.getSpeed(n - 1);\n            let v = this.getSpeed(n);\n            let vP = this.getSpeed(n + 1);\n\n            // for first transition\n            let deltaV = v - v0;\n            let tInE = Math.abs((this.d * this.m * deltaV) / (this.V * this.q));\n\n            // for second transition\n            let deltaVP = vP - v;\n            let tInEP = Math.abs(\n                (this.d * this.m * deltaVP) / (this.V * this.q),\n            );\n\n            let speed;\n\n            if (r <= tInE / 2) {\n                let sf = r / tInE + 0.5;\n                speed = v0 + sf * deltaV;\n            } else if (r >= gapTime - tInEP / 2) {\n                let sf = (r - (gapTime - tInEP / 2)) / tInEP;\n                speed = v + sf * deltaVP;\n            } else {\n                speed = v;\n            }\n\n            // update velocity magnitude\n            this.v.setMag(speed);\n\n            // magnetic force\n            let b = p.createVector(0, this.B, 0);\n            let perpendicular = p5__WEBPACK_IMPORTED_MODULE_3___default().Vector.cross(this.v, b).normalize();\n            let aMag = (speed * this.B * this.q) / this.m;\n            let aVec = p5__WEBPACK_IMPORTED_MODULE_3___default().Vector.mult(\n                perpendicular,\n                aMag / p.getTargetFrameRate(),\n            );\n            this.v.add(aVec);\n\n            // update position\n            this.pos.add(p5__WEBPACK_IMPORTED_MODULE_3___default().Vector.mult(this.v, 1 / p.getTargetFrameRate()));\n\n            // update history\n            this.history.push(this.pos.copy());\n            if (this.history.length > this.historyLimit) {\n                this.history.shift();\n            }\n        }\n\n        // draw history\n        this.historyLimit = 20 * p.frameRate();\n        p.stroke(200);\n        p.strokeWeight(0.25);\n        for (let i = 0; i < this.history.length - 3; i += 3) {\n            p.push();\n            p.line(\n                this.history[i].x,\n                this.history[i].y,\n                this.history[i].z,\n                this.history[i + 3].x,\n                this.history[i + 3].y,\n                this.history[i + 3].z,\n            );\n            p.pop();\n        }\n\n        // draw particle\n        p.push();\n        p.noStroke();\n\n        if (this.q > 0) {\n            p.fill('#a6bd6f');\n        } else {\n            p.fill('#9c6270');\n        }\n\n        p.translate(this.pos);\n        p.sphere(1, 24, 24);\n        p.pop();\n\n        // add data\n        let time = (p.millis() - this.start) * 0.001;\n\n        // keep data to 100 readings\n        if (this.data.t.length > 500) {\n            this.data.t.shift();\n            this.data.v.shift();\n            this.data.pd.shift();\n            this.data.s.shift();\n        }\n        if (!this.paused) {\n            this.data.t.push(time * 1e-5);\n            this.data.v.push(this.v.mag() * 1e5);\n            let pd =\n                this.V *\n                100 *\n                p.cos((((2 * Math.PI) / T) * (p.millis() - this.start)) / 1000);\n            this.data.pd.push(pd);\n            this.data.s.push(this.pos.x * 1e3);\n        }\n\n        if (this.selected == 'graphs') {\n            this.graph();\n        }\n\n        this.updateAttributes();\n    }\n\n    togglePause(paused = null) {\n        if (typeof paused !== Boolean) {\n            paused = !this.paused;\n        }\n\n        this.paused = paused;\n\n        if (this.paused) {\n            this.pauseStart = Date.now();\n        } else {\n            this.start = this.start + (Date.now() - this.pauseStart);\n        }\n    }\n\n    graph() {\n        if (this.paused) return;\n\n        // update datasets\n        this.updateChart(this.vChart, this.data.t, this.data.v);\n        this.updateChart(this.pdChart, this.data.t, this.data.pd);\n        this.updateChart(this.sChart, this.data.t, this.data.s);\n    }\n\n    initChart(canvas, title, yLabel) {\n        return new chart_js_auto__WEBPACK_IMPORTED_MODULE_2__[\"default\"](canvas, {\n            type: 'line',\n            data: {\n                labels: [], // time data\n                datasets: [\n                    {\n                        label: title,\n                        data: [], // displacement, velocity, or acceleration data\n                        borderColor: '#6c46cc',\n                        borderWidth: 1,\n                        tension: 0.5, // smooth curve\n                        pointRadius: 1,\n                    },\n                ],\n            },\n            options: {\n                responsive: true,\n                maintainAspectRatio: true,\n                animation: false,\n                scales: {\n                    x: {\n                        type: 'linear',\n                        title: {\n                            display: true,\n                            text: 't/s',\n                            font: { family: 'CMUSerifRoman', size: 14 },\n                        },\n                        ticks: {\n                            callback: function (value, index, ticks) {\n                                // Format x-axis tick values to 2 decimal places\n                                return value.toFixed(10);\n                            },\n                        },\n                    },\n                    y: {\n                        title: {\n                            display: true,\n                            text: yLabel,\n                            font: { family: 'CMUSerifRoman', size: 14 },\n                        },\n                    },\n                },\n                plugins: {\n                    title: {\n                        display: true,\n                        text: title,\n                        font: { family: 'CMUSerifRoman', size: 16 },\n                        color: '#fff',\n                    },\n                    decimation: {\n                        enabled: true,\n                        algorithm: 'min-max',\n                        samples: 25,\n                    },\n                    legend: { display: false },\n                },\n                layout: { padding: { right: 0 } },\n                backgroundColor: '#1e1e1e',\n                color: '#fff',\n            },\n        });\n    }\n\n    updateChart(chart, labels, data) {\n        chart.data.labels = labels;\n        chart.data.datasets[0].data = data;\n        chart.update();\n    }\n\n    updateAttributes() {\n        this.attributeWrapper.innerHTML = `\n\t\t\tv = ${(this.v.mag().toFixed(0) * 1e5).toFixed(0)} m/s <br>\n\t  \t`;\n    }\n\n    getSpeed(n) {\n        return Math.sqrt(\n            (2 * n * Math.abs(this.V) * Math.abs(this.q)) / this.m\n        );\n    }\n}\n\n\n//# sourceURL=webpack://physicsim/./src/Simulations/CyclotronSimulation.js?");

/***/ })

}]);