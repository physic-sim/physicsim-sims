"use strict";
/*
 * ATTENTION: The "eval" devtool has been used (maybe by default in mode: "development").
 * This devtool is neither made for production nor for readable output files.
 * It uses "eval()" calls to create a separate source file in the browser devtools.
 * If you are trying to read the output file, select a different devtool (https://webpack.js.org/configuration/devtool/)
 * or disable the default devtool with "devtool: false".
 * If you are looking for production-ready output files, see mode: "production" (https://webpack.js.org/configuration/mode/).
 */
(self["webpackChunkphysicsim"] = self["webpackChunkphysicsim"] || []).push([["src_Simulations_CircularMotionSimulation_js"],{

/***/ "./src/Input/NumInput.js":
/*!*******************************!*\
  !*** ./src/Input/NumInput.js ***!
  \*******************************/
/***/ ((__unused_webpack_module, __webpack_exports__, __webpack_require__) => {

eval("__webpack_require__.r(__webpack_exports__);\n/* harmony export */ __webpack_require__.d(__webpack_exports__, {\n/* harmony export */   NumInput: () => (/* binding */ NumInput)\n/* harmony export */ });\nclass NumInput {\n    base;\n    input;\n    disabled;\n\n    constructor(base, val, disabled = false, onClick = null) {\n        this.base = base;\n        this.disabled = disabled;\n        // construct html framework\n        let input = document.createElement('input');\n        input.classList.add('num-input-input');\n        if (disabled) {\n            input.classList.add('input-disabled');\n        }\n        input.disabled = disabled;\n\n        if (onClick !== null) {\n            this.base.addEventListener('click', onClick);\n        }\n\n        this.input = input;\n        this.input.type = 'number';\n        this.input.required = true;\n        this.input.value = Number(val);\n        base.appendChild(this.input);\n    }\n\n    get() {\n        return Number(this.input.value);\n    }\n\n    set(val) {\n        this.input.value = val;\n    }\n\n    toggleDisable() {\n        this.disabled = !this.disabled;\n        this.input.disabled = this.disabled;\n        if (this.disabled) {\n            this.input.classList.add('input-disabled');\n        } else {\n            this.input.classList.remove('input-disabled');\n        }\n    }\n}\n\n\n//# sourceURL=webpack://physicsim/./src/Input/NumInput.js?");

/***/ }),

/***/ "./src/Input/ValueInput.js":
/*!*********************************!*\
  !*** ./src/Input/ValueInput.js ***!
  \*********************************/
/***/ ((__unused_webpack_module, __webpack_exports__, __webpack_require__) => {

eval("__webpack_require__.r(__webpack_exports__);\n/* harmony export */ __webpack_require__.d(__webpack_exports__, {\n/* harmony export */   ValueInput: () => (/* binding */ ValueInput)\n/* harmony export */ });\n/* harmony import */ var _NumInput__WEBPACK_IMPORTED_MODULE_0__ = __webpack_require__(/*! ./NumInput */ \"./src/Input/NumInput.js\");\n\n\nclass ValueInput {\n    base;\n    val;\n    label;\n    unit;\n\n    constructor(base, val, label, unit, disabled = false, onClick = null) {\n        this.base = base;\n        this.label = label;\n        this.unit = unit;\n\n        // construct html framework\n        let container = document.createElement('div');\n        container.classList.add('value-input-container');\n\n        let pLabel = document.createElement('p');\n        pLabel.innerHTML = this.label;\n        pLabel.classList.add('value-input-text');\n\n        let pEqual = document.createElement('p');\n        pEqual.innerHTML = '=';\n        pLabel.classList.add('value-input-text');\n\n        let pUnit = document.createElement('p');\n        pUnit.innerHTML = this.unit;\n        pUnit.classList.add('value-input-text');\n\n        container.append(pLabel, pEqual);\n\n        this.val = new _NumInput__WEBPACK_IMPORTED_MODULE_0__.NumInput(container, val, disabled, onClick);\n\n        container.append(pUnit);\n\n        this.base.appendChild(container);\n    }\n\n    get() {\n        return this.val.get();\n    }\n\n    set(val) {\n        this.val.set(val);\n    }\n\n    toggleDisable() {\n        this.val.toggleDisable();\n    }\n}\n\n\n//# sourceURL=webpack://physicsim/./src/Input/ValueInput.js?");

/***/ }),

/***/ "./src/Simulations/CircularMotionSimulation.js":
/*!*****************************************************!*\
  !*** ./src/Simulations/CircularMotionSimulation.js ***!
  \*****************************************************/
/***/ ((__unused_webpack_module, __webpack_exports__, __webpack_require__) => {

eval("__webpack_require__.r(__webpack_exports__);\n/* harmony export */ __webpack_require__.d(__webpack_exports__, {\n/* harmony export */   \"default\": () => (/* binding */ CircularMotionSimulation)\n/* harmony export */ });\n/* harmony import */ var _ThreeDSimulation__WEBPACK_IMPORTED_MODULE_0__ = __webpack_require__(/*! ./ThreeDSimulation */ \"./src/Simulations/ThreeDSimulation.js\");\n/* harmony import */ var _Input_ValueInput__WEBPACK_IMPORTED_MODULE_1__ = __webpack_require__(/*! ../Input/ValueInput */ \"./src/Input/ValueInput.js\");\n/* harmony import */ var _Controls_Button__WEBPACK_IMPORTED_MODULE_2__ = __webpack_require__(/*! ../Controls/Button */ \"./src/Controls/Button.js\");\n/* harmony import */ var chart_js_auto__WEBPACK_IMPORTED_MODULE_3__ = __webpack_require__(/*! chart.js/auto */ \"./node_modules/chart.js/auto/auto.js\");\n/* harmony import */ var p5__WEBPACK_IMPORTED_MODULE_4__ = __webpack_require__(/*! p5 */ \"./node_modules/p5/lib/p5.min-exposed.js\");\n/* harmony import */ var p5__WEBPACK_IMPORTED_MODULE_4___default = /*#__PURE__*/__webpack_require__.n(p5__WEBPACK_IMPORTED_MODULE_4__);\n\n\n\n\n\n\nclass CircularMotionSimulation extends _ThreeDSimulation__WEBPACK_IMPORTED_MODULE_0__.ThreeDSimulation {\n    rotationalRef = false;\n    angularPref = false;\n    sf = 10;\n\n    constructor(container, inputs, graphs, controls, attributes) {\n        super(container, inputs, graphs, controls, attributes);\n\n        // add inputs\n        this.massInput = new _Input_ValueInput__WEBPACK_IMPORTED_MODULE_1__.ValueInput(this.inputWrapper, 5, 'Mass', 'kg');\n        this.rInput = new _Input_ValueInput__WEBPACK_IMPORTED_MODULE_1__.ValueInput(this.inputWrapper, 20, 'Radius', 'm');\n\n        let selector = document.createElement('div');\n        selector.classList.add('input-selector-wrapper');\n\n        let options = document.createElement('div');\n        options.classList.add('input-selector-options');\n\n        this.optionV = document.createElement('div');\n        this.optionV.classList.add('input-selector-option');\n        this.optionV.classList.add('input-selector-option--selected');\n        this.optionV.innerHTML = 'Tangential';\n        let onClickV = () => {\n            this.toggleInputPref('tangential');\n        };\n        this.optionV.addEventListener('click', onClickV.bind(this));\n\n        this.optionA = document.createElement('div');\n        this.optionA.classList.add('input-selector-option');\n        this.optionA.innerHTML = 'Angular';\n        let onClickA = () => {\n            this.toggleInputPref('angular');\n        };\n        this.optionA.addEventListener('click', onClickA.bind(this));\n\n        options.append(this.optionV, this.optionA);\n\n        this.wrapperV = document.createElement('div');\n        this.vInput = new _Input_ValueInput__WEBPACK_IMPORTED_MODULE_1__.ValueInput(\n            this.wrapperV,\n            10,\n            'Tangential Velocity',\n            'ms<sup>-1</sup>',\n        );\n        this.wrapperA = document.createElement('div');\n        this.omegaInput = new _Input_ValueInput__WEBPACK_IMPORTED_MODULE_1__.ValueInput(\n            this.wrapperA,\n            0,\n            'Angular Velocity',\n            'rads<sup>-1</sup>',\n        );\n        this.wrapperA.style.display = 'none';\n\n        selector.append(options, this.wrapperV, this.wrapperA);\n\n        this.inputWrapper.append(selector);\n\n        // init data and graphs\n        this.data = {};\n        this.sGraph = this.makeGraph();\n        this.vGraph = this.makeGraph();\n        this.aGraph = this.makeGraph();\n        this.sChart = this.initChart(\n            this.sGraph,\n            'Displacement-Time (x-direction)',\n            'sₓ (m)',\n        );\n        this.vChart = this.initChart(\n            this.vGraph,\n            'Velocity-Time (x-direction)',\n            'vₓ (m/s)',\n        );\n        this.aChart = this.initChart(\n            this.aGraph,\n            'Acceleration-Time (x-direction)',\n            'aₓ (m/s²)',\n        );\n    }\n\n    init(p) {\n        // add custom btns\n        this.toggleFrameRefBtn = new _Controls_Button__WEBPACK_IMPORTED_MODULE_2__.Button(\n            this.controlWrapper,\n            (() => this.toggleFrameRef(p)).bind(this),\n            'Frame Ref.',\n        );\n\n        // init data\n        this.data.t = [];\n        this.data.s = [];\n        this.data.v = [];\n        this.data.a = [];\n        this.start = p.millis();\n\n        // init position\n        this.r = Math.abs(this.rInput.get() * this.sf);\n        this.mass = Math.abs(this.massInput.get());\n        if (this.angularPref) {\n            this.v = new (p5__WEBPACK_IMPORTED_MODULE_4___default().Vector)(0, 0, this.omegaInput.get() * this.r);\n            this.vInput.set((this.v.z / this.sf).toFixed(2));\n        } else {\n            this.v = new (p5__WEBPACK_IMPORTED_MODULE_4___default().Vector)(0, 0, this.vInput.get() * this.sf);\n            this.omegaInput.set((this.v.z / this.r).toFixed(2));\n        }\n        this.c = p.createVector(0, 0, 0);\n        this.pos = p.createVector(this.c.x + this.r, 0, 0);\n    }\n\n    frame(p) {\n        p.ambientLight(200);\n\n        // frame of reference control\n        if (this.rotationalRef) {\n            this.cam = p.createCamera();\n            p.push();\n            this.cam.setPosition(this.c.x, this.c.y + 500, this.c.z);\n            this.cam.lookAt(this.pos.x, this.pos.y, this.pos.z);\n            this.cam.ortho();\n            p.pop();\n        } else if (this.rotationalRef == false && this.rotateControl) {\n            p.perspective(0.4, this.width / this.height, 10, 500000);\n            let options = {\n                disableTouchActions: false,\n                freeRotation: false,\n            };\n            p.orbitControl(1, 1, 1, options);\n        }\n\n        // draw centre\n        p.push();\n        p.translate(this.c);\n        p.stroke(255, 255, 255, 100);\n        p.line(-this.r, 0, 0, this.r, 0, 0);\n        p.line(0, -10, 0, 0, 10, 0);\n        p.line(0, 0, -this.r, 0, 0, this.r);\n        p.pop();\n\n        // split velocity into tangential and non-tangential\n        let n = p5__WEBPACK_IMPORTED_MODULE_4___default().Vector.sub(this.c, this.pos);\n        n.normalize();\n\n        let vn = p5__WEBPACK_IMPORTED_MODULE_4___default().Vector.dot(this.v, n);\n        let vnv = p5__WEBPACK_IMPORTED_MODULE_4___default().Vector.mult(n, vn);\n        let vpv = p5__WEBPACK_IMPORTED_MODULE_4___default().Vector.sub(this.v, vnv);\n\n        // calculate centripetal acceleration\n        let a = Math.pow(vpv.mag(), 2) / this.r;\n        let av = p5__WEBPACK_IMPORTED_MODULE_4___default().Vector.mult(n, a);\n        let avt = p5__WEBPACK_IMPORTED_MODULE_4___default().Vector.mult(av, 1 / p.getTargetFrameRate());\n\n        // draw arrows\n        this.drawArrow(\n            p,\n            this.pos,\n            p5__WEBPACK_IMPORTED_MODULE_4___default().Vector.mult(av, this.mass / p.getTargetFrameRate()),\n            3,\n            2,\n            [0, 255, 0],\n        );\n        this.drawArrow(\n            p,\n            this.pos,\n            p5__WEBPACK_IMPORTED_MODULE_4___default().Vector.mult(vpv, 1 / p.getTargetFrameRate()),\n            3,\n            10,\n            [255, 0, 0],\n        );\n        this.drawArrow(\n            p,\n            this.c,\n            p5__WEBPACK_IMPORTED_MODULE_4___default().Vector.add(this.c, p.createVector(this.pos.x, 0, 0)),\n            0,\n            1,\n            [108, 70, 204],\n        );\n\n        if (this.rotationalRef) {\n            this.drawArrow(\n                p,\n                this.pos,\n                p5__WEBPACK_IMPORTED_MODULE_4___default().Vector.mult(av, (-1 * this.mass) / p.getTargetFrameRate()),\n                3,\n                2,\n                [0, 255, 0],\n            );\n        }\n\n        // draw mass\n        p.push();\n        p.fill(166, 189, 111);\n        p.translate(this.pos);\n        p.noStroke();\n        p.sphere(Math.sqrt(this.mass) * 2, 24, 24);\n        p.pop();\n\n        // update position and velocity vectors\n        if (!this.paused) {\n            this.v.add(avt);\n            let vt = p5__WEBPACK_IMPORTED_MODULE_4___default().Vector.mult(this.v, 1 / p.getTargetFrameRate());\n            this.pos.add(vt);\n        }\n\n        // update data\n        let t = (p.millis() - this.start) * 0.001;\n\n        // keep data to 100 readings\n        if (this.data.t.length > 500) {\n            this.data.t.shift();\n            this.data.s.shift();\n            this.data.v.shift();\n            this.data.a.shift();\n        }\n\n        this.data.t.push(t);\n        this.data.s.push(this.pos.x / this.sf);\n        this.data.v.push(this.v.x / this.sf);\n        this.data.a.push(av.x / this.sf);\n\n        if (this.selected == 'graphs') {\n            this.graph();\n        }\n    }\n\n    drawArrow(p, base, vec, arrowSize, scale, colour) {\n        p.push();\n        p.translate(base.x, base.y, base.z);\n        let dir = vec.copy().normalize();\n        let len = vec.mag() * scale;\n\n        // rotate the arrow\n        let rotationAxis = p.createVector(0, 1, 0).cross(dir);\n        let rotationAngle = p.acos(p.createVector(0, 1, 0).dot(dir));\n        p.rotate(rotationAngle, rotationAxis);\n\n        // draw the arrow shaft\n        p.fill(colour[0], colour[1], colour[2]);\n        p.stroke(colour[0], colour[1], colour[2]);\n        p.strokeWeight(2);\n        p.line(0, 0, 0, 0, len, 0);\n\n        // draw the arrowhead\n        p.translate(0, len, 0);\n        p.noStroke();\n        p.cone(arrowSize, arrowSize * 2);\n        p.pop();\n    }\n\n    graph() {\n        if (this.paused) return;\n\n        // update datasets\n        this.updateChart(this.sChart, this.data.t, this.data.s);\n        this.updateChart(this.vChart, this.data.t, this.data.v);\n        this.updateChart(this.aChart, this.data.t, this.data.a);\n    }\n\n    initChart(canvas, title, yLabel) {\n        return new chart_js_auto__WEBPACK_IMPORTED_MODULE_3__[\"default\"](canvas, {\n            type: 'line',\n            data: {\n                labels: [], // time data\n                datasets: [\n                    {\n                        label: title,\n                        data: [], // displacement, velocity, or acceleration data\n                        borderColor: '#6c46cc',\n                        borderWidth: 1,\n                        tension: 0.5, // smooth curve\n                        pointRadius: 1,\n                    },\n                ],\n            },\n            options: {\n                responsive: true,\n                maintainAspectRatio: true,\n                animation: false,\n                scales: {\n                    x: {\n                        type: 'linear',\n                        title: {\n                            display: true,\n                            text: 't/s',\n                            font: { family: 'CMUSerifRoman', size: 14 },\n                        },\n                        ticks: {\n                            callback: function (value, index, ticks) {\n                                // format x-axis tick values to 2 decimal places\n                                return value.toFixed(2);\n                            },\n                        },\n                    },\n                    y: {\n                        title: {\n                            display: true,\n                            text: yLabel,\n                            font: { family: 'CMUSerifRoman', size: 14 },\n                        },\n                    },\n                },\n                plugins: {\n                    title: {\n                        display: true,\n                        text: title,\n                        font: { family: 'CMUSerifRoman', size: 16 },\n                        color: '#fff',\n                    },\n                    decimation: {\n                        enabled: true,\n                        algorithm: 'min-max',\n                        samples: 25,\n                    },\n                    legend: { display: false },\n                },\n                layout: { padding: { right: 0 } },\n                backgroundColor: '#1e1e1e',\n                color: '#fff',\n            },\n        });\n    }\n\n    updateChart(chart, labels, data) {\n        chart.data.labels = labels;\n        chart.data.datasets[0].data = data;\n        chart.update();\n    }\n\n    toggleInputPref(setting) {\n        if (setting == 'angular' && !this.angularPref) {\n            this.angularPref = true;\n            this.wrapperA.style.display = 'block';\n            this.wrapperV.style.display = 'none';\n            this.optionA.classList.add('input-selector-option--selected');\n            this.optionV.classList.remove('input-selector-option--selected');\n        } else if (setting == 'tangential' && this.angularPref) {\n            this.angularPref = false;\n            this.wrapperA.style.display = 'none';\n            this.wrapperV.style.display = 'block';\n            this.optionA.classList.remove('input-selector-option--selected');\n            this.optionV.classList.add('input-selector-option--selected');\n        }\n    }\n\n    toggleFrameRef(p) {\n        this.rotationalRef = !this.rotationalRef;\n        // reset camera\n        if (!this.rotationalRef) {\n            this.cam = p.createCamera();\n            this.cam.lookAt(this.c.x, this.c.y, this.c.z);\n        }\n    }\n}\n\n\n//# sourceURL=webpack://physicsim/./src/Simulations/CircularMotionSimulation.js?");

/***/ })

}]);