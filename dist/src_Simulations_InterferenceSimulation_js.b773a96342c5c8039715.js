"use strict";
/*
 * ATTENTION: The "eval" devtool has been used (maybe by default in mode: "development").
 * This devtool is neither made for production nor for readable output files.
 * It uses "eval()" calls to create a separate source file in the browser devtools.
 * If you are trying to read the output file, select a different devtool (https://webpack.js.org/configuration/devtool/)
 * or disable the default devtool with "devtool: false".
 * If you are looking for production-ready output files, see mode: "production" (https://webpack.js.org/configuration/mode/).
 */
(self["webpackChunkphysicsim"] = self["webpackChunkphysicsim"] || []).push([["src_Simulations_InterferenceSimulation_js"],{

/***/ "./src/Input/CheckBoxInput.js":
/*!************************************!*\
  !*** ./src/Input/CheckBoxInput.js ***!
  \************************************/
/***/ ((__unused_webpack_module, __webpack_exports__, __webpack_require__) => {

eval("__webpack_require__.r(__webpack_exports__);\n/* harmony export */ __webpack_require__.d(__webpack_exports__, {\n/* harmony export */   CheckBoxInput: () => (/* binding */ CheckBoxInput)\n/* harmony export */ });\nclass CheckBoxInput {\n    base;\n    input;\n    disabled;\n    input;\n\n    constructor(base, val, label) {\n        this.base = base;\n        this.label = label;\n\n        // construct html framework\n        let container = document.createElement('div');\n        container.classList.add('check-box-input-container');\n\n        let pLabel = document.createElement('p');\n        pLabel.innerHTML = label;\n        pLabel.classList.add('check-box-input-text');\n\n        this.input = document.createElement('input');\n        this.input.type = 'checkbox';\n        this.input.checked = val;\n        this.input.classList.add('check-box-input-input');\n\n        container.append(this.input, pLabel);\n\n        this.base.appendChild(container);\n    }\n\n    get() {\n        return this.input.checked;\n    }\n\n    set(val) {\n        this.input.checked = val;\n    }\n}\n\n\n//# sourceURL=webpack://physicsim/./src/Input/CheckBoxInput.js?");

/***/ }),

/***/ "./src/Input/SliderInput.js":
/*!**********************************!*\
  !*** ./src/Input/SliderInput.js ***!
  \**********************************/
/***/ ((__unused_webpack_module, __webpack_exports__, __webpack_require__) => {

eval("__webpack_require__.r(__webpack_exports__);\n/* harmony export */ __webpack_require__.d(__webpack_exports__, {\n/* harmony export */   SliderInput: () => (/* binding */ SliderInput)\n/* harmony export */ });\nclass SliderInput {\n    base;\n    input;\n    min;\n    max;\n    label;\n    unit;\n    pLabel;\n\n    constructor(base, val, min, max, step, label, unit, update = true) {\n        this.base = base;\n        this.min = min;\n        this.max = max;\n        this.label = label;\n        this.unit = unit;\n\n        let container = document.createElement('div');\n        container.classList.add('slider-input-container');\n\n        this.pLabel = document.createElement('p');\n        if (update) {\n            this.pLabel.innerHTML = `${this.label} = ${val.toFixed(2)} ${this.unit}`;\n        } else {\n            this.pLabel.innerHTML = this.label;\n        }\n\n        this.input = document.createElement('input');\n        this.input.type = 'range';\n        this.input.min = this.min;\n        this.input.max = this.max;\n        this.input.value = val;\n        this.input.step = step;\n        this.input.classList.add('slider-input-slider');\n\n        container.append(this.pLabel, this.input);\n\n        this.base.append(container);\n\n        if (update) {\n            this.input.addEventListener('input', this.update.bind(this));\n        }\n    }\n\n    get() {\n        return parseFloat(this.input.value);\n    }\n\n    set(val) {\n        this.input.value = val;\n    }\n\n    update() {\n        this.pLabel.innerHTML = `${this.label} = ${this.get().toFixed(2)} ${this.unit}`;\n    }\n}\n\n\n//# sourceURL=webpack://physicsim/./src/Input/SliderInput.js?");

/***/ }),

/***/ "./src/Simulations/InterferenceSimulation.js":
/*!***************************************************!*\
  !*** ./src/Simulations/InterferenceSimulation.js ***!
  \***************************************************/
/***/ ((__unused_webpack_module, __webpack_exports__, __webpack_require__) => {

eval("__webpack_require__.r(__webpack_exports__);\n/* harmony export */ __webpack_require__.d(__webpack_exports__, {\n/* harmony export */   \"default\": () => (/* binding */ InterferenceSimulation)\n/* harmony export */ });\n/* harmony import */ var _TwoDSimulation__WEBPACK_IMPORTED_MODULE_0__ = __webpack_require__(/*! ./TwoDSimulation */ \"./src/Simulations/TwoDSimulation.js\");\n/* harmony import */ var _Input_SliderInput__WEBPACK_IMPORTED_MODULE_1__ = __webpack_require__(/*! ../Input/SliderInput */ \"./src/Input/SliderInput.js\");\n/* harmony import */ var _Input_CheckBoxInput__WEBPACK_IMPORTED_MODULE_2__ = __webpack_require__(/*! ../Input/CheckBoxInput */ \"./src/Input/CheckBoxInput.js\");\n/* harmony import */ var p5__WEBPACK_IMPORTED_MODULE_3__ = __webpack_require__(/*! p5 */ \"./node_modules/p5/lib/p5.min-exposed.js\");\n/* harmony import */ var p5__WEBPACK_IMPORTED_MODULE_3___default = /*#__PURE__*/__webpack_require__.n(p5__WEBPACK_IMPORTED_MODULE_3__);\n/* harmony import */ var p5_lib_addons_p5_sound__WEBPACK_IMPORTED_MODULE_4__ = __webpack_require__(/*! p5/lib/addons/p5.sound */ \"./node_modules/p5/lib/addons/p5.sound.js\");\n/* harmony import */ var p5_lib_addons_p5_sound__WEBPACK_IMPORTED_MODULE_4___default = /*#__PURE__*/__webpack_require__.n(p5_lib_addons_p5_sound__WEBPACK_IMPORTED_MODULE_4__);\n\n\n\n\n \n\nclass InterferenceSimulation extends _TwoDSimulation__WEBPACK_IMPORTED_MODULE_0__.TwoDSimulation {\n    v = 343; // speed of sound\n    sf = 1/100;\n    isDragging = false;\n\n    constructor(container, inputs, controls, attributes) {\n        super(container, inputs, controls, attributes, false, true);\n\n        // add inputs\n        this.useSoundInput = new _Input_CheckBoxInput__WEBPACK_IMPORTED_MODULE_2__.CheckBoxInput(\n            this.inputWrapper,\n            false,\n            'Play tone'\n        );\n\n        this.posInput = new _Input_SliderInput__WEBPACK_IMPORTED_MODULE_1__.SliderInput(\n            this.inputWrapper,\n            1,\n            0,\n            2,\n            0.001,\n            'Position of Observer',\n            '',\n            false\n        );\n\n        this.lambdaInput = new _Input_SliderInput__WEBPACK_IMPORTED_MODULE_1__.SliderInput(\n            this.inputWrapper,\n            1.5,\n            0.1,\n            11,\n            0.1,\n            'Î»',\n            'm'\n        );\n    }\n\n    init() {\n        // initalise simulation\n        this.p = new (p5__WEBPACK_IMPORTED_MODULE_3___default())((p) => {\n            p.setup = () => this.simSetup(p);\n            p.draw = () => this.simDraw(p);\n            p.windowResized = () => this.handleResize(p);\n            p.mouseDragged = () => this.mouseDragged(p);\n            p.mouseReleased = () => this.mouseReleased(p);\n            p.touchEnded = () => this.mouseReleased(p);\n        });\n\n        // prevent scroll when dragging on mobile\n        document.addEventListener('touchmove', (e) => {\n            if (this.isDragging) {\n                e.preventDefault();\n            }\n        }, { passive: false }) \n    }\n\n    simSetup(p) {\n        this.width = document.getElementById('sim-div').offsetWidth\n        this.height = document.getElementById('sim-div').offsetHeight\n        p.createCanvas(\n            this.width,\n            this.height,\n            (p5__WEBPACK_IMPORTED_MODULE_3___default().P2D),\n            this.container,\n        );\n        p.background(8, 8, 8);\n\n        // add speakers\n        this.src1 = new (p5__WEBPACK_IMPORTED_MODULE_3___default().Vector)(\n            p.width * 0.25,\n            p.height * 0.5,\n        );\n        this.src2 = new (p5__WEBPACK_IMPORTED_MODULE_3___default().Vector)(\n            p.width * 0.75,\n            p.height * 0.5,\n        );\n        this.obs = new (p5__WEBPACK_IMPORTED_MODULE_3___default().Vector)(\n            this.getPosition(p),\n            p.height * 0.5,\n        );\n        \n        // give obs velocity\n        this.vel = 0.5\n\n        // setup tone generator\n        if (this.osc) {\n            this.osc.stop();\n        }\n\n        this.osc = new (p5__WEBPACK_IMPORTED_MODULE_3___default().Oscillator)('sine');\n        this.osc.freq(this.v / this.lambdaInput.get());\n        this.osc.amp(0.5, 0);\n        this.isPlaying = false;\n    }\n\n    simDraw(p) {\n        p.background(0, 0, 0);\n\n        if (!this.isDragging) {\n            this.obs = new (p5__WEBPACK_IMPORTED_MODULE_3___default().Vector)(this.getPosition(p), this.obs.y);\n        } else {\n            this.posInput.set(this.obs.x / p.width * 2);\n        }\n\n        this.osc.freq(this.v / this.lambdaInput.get());\n\n        // move observer if configured\n        if (this.paused == false) {\n            let scale = (this.obs.x + this.vel) / p.width\n\n            if (scale > 1) {\n                this.vel = -this.vel\n            } else if (scale < 0) {\n                this.vel = -this.vel\n            }\n\n            this.posInput.set(scale * 2);\n            this.obs.x = Math.abs(p.width * scale);\n        }\n\n        // calculate path difference and play tune\n        let d1 = p5__WEBPACK_IMPORTED_MODULE_3___default().Vector.dist(this.src1, this.obs) * this.sf;\n        let d2 = p5__WEBPACK_IMPORTED_MODULE_3___default().Vector.dist(this.src2, this.obs) * this.sf;\n\n        let lambda = this.lambdaInput.get();\n        let pathDiff = Math.abs(d1 - d2);\n        let phaseDiff = (pathDiff / lambda) * (2 * Math.PI) % (2 * Math.PI);\n\n\n        let percievedAmplitude = (1 + p.cos(phaseDiff)) / 2;\n        this.osc.amp(percievedAmplitude, 0.1);\n\n        if (this.useSoundInput.get() && this.isPlaying == false) {\n            this.isPlaying = true;\n            p.userStartAudio();\n            this.osc.start();\n        } else if (!this.useSoundInput.get() && this.isPlaying == true) {\n            this.osc.stop();\n            this.isPlaying = false;\n        }\n\n        // update attributes\n        this.attributeWrapper.innerHTML = `\n            Path Difference = ${Math.abs(((d1 - d2) / lambda).toFixed(1))}Î»<br>\n            Phase Difference = ${phaseDiff.toFixed(1)} rad\n        `;\n\n        // draw speakers and observers\n        this.drawSpeaker(p, this.src1.x, this.src1.y);\n        this.drawSpeaker(p, this.src2.x, this.src2.y);\n        p.fill(108, 70, 204);\n        p.noStroke();\n        p.circle(this.obs.x, this.obs.y, 25);\n    }\n\n    drawSpeaker(p, x, y) {\n        p.noStroke();\n        p.fill(35, 35, 35);\n        p.circle(\n            x,\n            y,\n            50 +\n                5 *\n                    p.sin(\n                        (p.millis() / 1e5) * (this.v / this.lambdaInput.get()),\n                    ),\n        );\n        p.fill(55, 55, 55);\n        p.circle(x, y, 30);\n        p.fill(25, 25, 25);\n        p.circle(x, y, 10);\n\n        // draw wave fronts\n        for (\n            let i = 0;\n            i < p.width / this.lambdaInput.get() * this.sf;\n            i++\n        ) {\n            p.noFill();\n            p.stroke(\n                100,\n                100,\n                100,\n                (i / (p.width / this.lambdaInput.get() * this.sf)) * 255,\n            );\n            p.circle(x, y, this.lambdaInput.get() * 1 / this.sf * i);\n        }\n    }\n\n    mouseDragged(p) {\n\n        if (!this.isInBounds(p)) {\n            return;\n        }\n\n        this.isDragging = true;\n        document.body.style.overflow = 'hidden';\n        this.obs.x = p.mouseX;\n        this.obs.y = p.mouseY;\n\n        if (!this.paused) {\n            this.togglePause();\n            this.pauseBtn.onClick();\n            this.pauseBtn.paused = true;\n        }\n    }\n\n    mouseReleased(p) {\n        if (this.isDragging) {\n            this.isDragging = false;\n            document.body.style.overflowY = 'auto';\n        }\n    }\n\n    isInBounds(p) {\n        if (p.mouseX < 0 || p.mouseX > p.width) {\n            return false;\n        }\n\n        if (p.mouseY < 0 || p.mouseY > p.height) {\n            return false;\n        }\n\n        return true;\n    }\n\n    getPosition(p) {\n        let x = p.width * (this.posInput.get() / 2);\n        return x;\n    }\n\n    handleResize(p) {\n        setTimeout(() => this.simSetup(p), 250);\n    }\n}\n\n\n//# sourceURL=webpack://physicsim/./src/Simulations/InterferenceSimulation.js?");

/***/ })

}]);