"use strict";
/*
 * ATTENTION: The "eval" devtool has been used (maybe by default in mode: "development").
 * This devtool is neither made for production nor for readable output files.
 * It uses "eval()" calls to create a separate source file in the browser devtools.
 * If you are trying to read the output file, select a different devtool (https://webpack.js.org/configuration/devtool/)
 * or disable the default devtool with "devtool: false".
 * If you are looking for production-ready output files, see mode: "production" (https://webpack.js.org/configuration/mode/).
 */
(self["webpackChunkphysicsim"] = self["webpackChunkphysicsim"] || []).push([["src_Simulations_NuclearDecaySimulation_js"],{

/***/ "./src/Input/CheckBoxInput.js":
/*!************************************!*\
  !*** ./src/Input/CheckBoxInput.js ***!
  \************************************/
/***/ ((__unused_webpack_module, __webpack_exports__, __webpack_require__) => {

eval("__webpack_require__.r(__webpack_exports__);\n/* harmony export */ __webpack_require__.d(__webpack_exports__, {\n/* harmony export */   CheckBoxInput: () => (/* binding */ CheckBoxInput)\n/* harmony export */ });\nclass CheckBoxInput {\n    base;\n    input;\n    disabled;\n    input;\n\n    constructor(base, val, label) {\n        this.base = base;\n        this.label = label;\n\n        // construct html framework\n        let container = document.createElement('div');\n        container.classList.add('check-box-input-container');\n\n        let pLabel = document.createElement('p');\n        pLabel.innerHTML = label;\n        pLabel.classList.add('check-box-input-text');\n\n        this.input = document.createElement('input');\n        this.input.type = 'checkbox';\n        this.input.checked = val;\n        this.input.classList.add('check-box-input-input');\n\n        container.append(this.input, pLabel);\n\n        this.base.appendChild(container);\n    }\n\n    get() {\n        return this.input.checked;\n    }\n\n    set(val) {\n        this.input.checked = val;\n    }\n}\n\n\n//# sourceURL=webpack://physicsim/./src/Input/CheckBoxInput.js?");

/***/ }),

/***/ "./src/Input/NumInput.js":
/*!*******************************!*\
  !*** ./src/Input/NumInput.js ***!
  \*******************************/
/***/ ((__unused_webpack_module, __webpack_exports__, __webpack_require__) => {

eval("__webpack_require__.r(__webpack_exports__);\n/* harmony export */ __webpack_require__.d(__webpack_exports__, {\n/* harmony export */   NumInput: () => (/* binding */ NumInput)\n/* harmony export */ });\nclass NumInput {\n    base;\n    input;\n    disabled;\n\n    constructor(base, val, disabled = false, onClick = null) {\n        this.base = base;\n        this.disabled = disabled;\n        // construct html framework\n        let input = document.createElement('input');\n        input.classList.add('num-input-input');\n        if (disabled) {\n            input.classList.add('input-disabled');\n        }\n        input.disabled = disabled;\n\n        if (onClick !== null) {\n            this.base.addEventListener('click', onClick);\n        }\n\n        this.input = input;\n        this.input.type = 'number';\n        this.input.required = true;\n        this.input.value = Number(val);\n        base.appendChild(this.input);\n    }\n\n    get() {\n        return Number(this.input.value);\n    }\n\n    set(val) {\n        this.input.value = val;\n    }\n\n    toggleDisable() {\n        this.disabled = !this.disabled;\n        this.input.disabled = this.disabled;\n        if (this.disabled) {\n            this.input.classList.add('input-disabled');\n        } else {\n            this.input.classList.remove('input-disabled');\n        }\n    }\n}\n\n\n//# sourceURL=webpack://physicsim/./src/Input/NumInput.js?");

/***/ }),

/***/ "./src/Input/ValueInput.js":
/*!*********************************!*\
  !*** ./src/Input/ValueInput.js ***!
  \*********************************/
/***/ ((__unused_webpack_module, __webpack_exports__, __webpack_require__) => {

eval("__webpack_require__.r(__webpack_exports__);\n/* harmony export */ __webpack_require__.d(__webpack_exports__, {\n/* harmony export */   ValueInput: () => (/* binding */ ValueInput)\n/* harmony export */ });\n/* harmony import */ var _NumInput__WEBPACK_IMPORTED_MODULE_0__ = __webpack_require__(/*! ./NumInput */ \"./src/Input/NumInput.js\");\n\n\nclass ValueInput {\n    base;\n    val;\n    label;\n    unit;\n\n    constructor(base, val, label, unit, disabled = false, onClick = null) {\n        this.base = base;\n        this.label = label;\n        this.unit = unit;\n\n        // construct html framework\n        let container = document.createElement('div');\n        container.classList.add('value-input-container');\n\n        let pLabel = document.createElement('p');\n        pLabel.innerHTML = this.label;\n        pLabel.classList.add('value-input-text');\n\n        let pEqual = document.createElement('p');\n        pEqual.innerHTML = '=';\n        pLabel.classList.add('value-input-text');\n\n        let pUnit = document.createElement('p');\n        pUnit.innerHTML = this.unit;\n        pUnit.classList.add('value-input-text');\n\n        container.append(pLabel, pEqual);\n\n        this.val = new _NumInput__WEBPACK_IMPORTED_MODULE_0__.NumInput(container, val, disabled, onClick);\n\n        container.append(pUnit);\n\n        this.base.appendChild(container);\n    }\n\n    get() {\n        return this.val.get();\n    }\n\n    set(val) {\n        this.val.set(val);\n    }\n\n    toggleDisable() {\n        this.val.toggleDisable();\n    }\n}\n\n\n//# sourceURL=webpack://physicsim/./src/Input/ValueInput.js?");

/***/ }),

/***/ "./src/Simulations/NuclearDecaySimulation.js":
/*!***************************************************!*\
  !*** ./src/Simulations/NuclearDecaySimulation.js ***!
  \***************************************************/
/***/ ((__unused_webpack_module, __webpack_exports__, __webpack_require__) => {

eval("__webpack_require__.r(__webpack_exports__);\n/* harmony export */ __webpack_require__.d(__webpack_exports__, {\n/* harmony export */   \"default\": () => (/* binding */ NuclearDecaySimulation)\n/* harmony export */ });\n/* harmony import */ var _Input_CheckBoxInput__WEBPACK_IMPORTED_MODULE_0__ = __webpack_require__(/*! ../Input/CheckBoxInput */ \"./src/Input/CheckBoxInput.js\");\n/* harmony import */ var _Input_ValueInput__WEBPACK_IMPORTED_MODULE_1__ = __webpack_require__(/*! ../Input/ValueInput */ \"./src/Input/ValueInput.js\");\n/* harmony import */ var _TwoDSimulation__WEBPACK_IMPORTED_MODULE_2__ = __webpack_require__(/*! ./TwoDSimulation */ \"./src/Simulations/TwoDSimulation.js\");\n/* harmony import */ var chart_js_auto__WEBPACK_IMPORTED_MODULE_3__ = __webpack_require__(/*! chart.js/auto */ \"./node_modules/chart.js/auto/auto.js\");\n\n\n\n\n\nclass NuclearDecaySimulation extends _TwoDSimulation__WEBPACK_IMPORTED_MODULE_2__.TwoDSimulation {\n    constructor(container, inputs, controls, attributes) {\n        super(container, inputs, controls, attributes);\n        // add inputs\n        this.nInput = new _Input_ValueInput__WEBPACK_IMPORTED_MODULE_1__.ValueInput(\n            this.inputWrapper,\n            1000,\n            'N<sub>0</sub>',\n            'Number of Nuclei',\n        );\n        this.lambdaInput = new _Input_ValueInput__WEBPACK_IMPORTED_MODULE_1__.ValueInput(\n            this.inputWrapper,\n            0.5,\n            'Î»',\n            '/s<sup>-1</sup> Decay Constant'\n        );\n        this.dtInput = new _Input_ValueInput__WEBPACK_IMPORTED_MODULE_1__.ValueInput(\n            this.inputWrapper,\n            '1',\n            'dt',\n            '/s Time Interval'\n        );\n        this.realTimeInput = new _Input_CheckBoxInput__WEBPACK_IMPORTED_MODULE_0__.CheckBoxInput(\n            this.inputWrapper,\n            true,\n            'Simulate Real Time'\n        );\n    }\n\n    init() {\n        // initialise data and inputs\n        this.n = this.nInput.get();\n        this.n0 = this.n;\n        this.lambda = this.lambdaInput.get();\n        this.dt = this.dtInput.get();\n        this.t = 0;\n\n        // clear current chart if present\n        if (this.chart) {\n            this.chart.destroy();\n        }\n\n        // clear current interval if present\n        if (this.interval) {\n            clearInterval(this.interval);\n        }\n\n        this.chart = new chart_js_auto__WEBPACK_IMPORTED_MODULE_3__[\"default\"](this.container, {\n            type: 'line',\n            data: {\n                labels: [], // time data\n                datasets: [\n                    {\n                        label: 'Model',\n                        data: [],\n                        borderColor: '#a6bd6f',\n                        backgroundColor: '#a6bd6f',\n                        borderWidth: 1,\n                        tension: 0.5, // smooth curve\n                        pointRadius: 1,\n                    },\n                    {\n                        label: 'Simulation',\n                        data: [],\n                        borderColor: '#6c46cc',\n                        backgroundColor: '#6c46cc',\n                        type: 'line',\n                        borderWidth: 1,\n                        tension: 0, // smooth curve\n                        pointRadius: 1,\n                    },\n                ],\n            },\n            options: {\n                responsive: true,\n                maintainAspectRatio: false,\n                animation: false,\n                scales: {\n                    x: {\n                        type: 'linear',\n                        stacked: true,\n                        title: {\n                            display: true,\n                            text: 't/s',\n                            font: { family: 'CMUSerifRoman', size: 14 },\n                            color: '#efefef',\n                        },\n                        ticks: {\n                            callback: function (value, index, ticks) {\n                                // format x-axis tick values to 2 decimal places\n                                return value.toFixed(2);\n                            },\n                        },\n                    },\n                    y: {\n                        title: {\n                            display: true,\n                            text: 'Number of Nuclei',\n                            font: { family: 'CMUSerifRoman', size: 14 },\n                            color: '#efefef',\n                        },\n                    },\n                },\n                plugins: {\n                    decimation: {\n                        enabled: true,\n                        algorithm: 'min-max',\n                        samples: 25,\n                    },\n                    legend: { display: true },\n                },\n                layout: { padding: { right: 30, left: 30, top: 75, bottom: 75 } },\n                backgroundColor: '#000',\n                color: '#fff',\n            },\n        });\n\n        if (this.realTimeInput.get()) {\n            this.step();\n            this.interval = setInterval(() => {\n                this.step();\n            }, this.dt * 1e3);\n        } else {\n            let time =\n                Math.log(0.5 / this.n0) / (-this.lambda * Math.log(Math.E));\n            this.dt = time / 50;\n            while (this.t < time) {\n                this.step();\n            }\n            this.paused = true;\n        }\n    }\n\n    step() {\n        // step forward in simulation every dt\n\n        if (this.paused) {\n            return;\n        }\n\n        this.chart.data.datasets[0].data.push(\n            this.n0 * Math.pow(Math.E, -this.lambda * this.t),\n        );\n        this.chart.data.datasets[1].data.push(this.n);\n        this.chart.data.labels.push(this.t);\n        this.chart.update();\n\n        let p = 1 - Math.pow(Math.E, -this.lambda * this.dt); // probability a nulceus will have decayed in dt\n\n        // generat random number deduct all that are less than p\n        let nTemp = this.n;\n        for (let i = 0; i < this.n; i++) {\n            let ran = Math.random();\n            if (ran <= p) {\n                nTemp--;\n            }\n        }\n\n        this.t += this.dt;\n        this.n = nTemp;\n    }\n}\n\n\n//# sourceURL=webpack://physicsim/./src/Simulations/NuclearDecaySimulation.js?");

/***/ })

}]);