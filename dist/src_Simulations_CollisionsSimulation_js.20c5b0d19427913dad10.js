"use strict";
/*
 * ATTENTION: The "eval" devtool has been used (maybe by default in mode: "development").
 * This devtool is neither made for production nor for readable output files.
 * It uses "eval()" calls to create a separate source file in the browser devtools.
 * If you are trying to read the output file, select a different devtool (https://webpack.js.org/configuration/devtool/)
 * or disable the default devtool with "devtool: false".
 * If you are looking for production-ready output files, see mode: "production" (https://webpack.js.org/configuration/mode/).
 */
(self["webpackChunkphysicsim"] = self["webpackChunkphysicsim"] || []).push([["src_Simulations_CollisionsSimulation_js"],{

/***/ "./src/Input/NumInput.js":
/*!*******************************!*\
  !*** ./src/Input/NumInput.js ***!
  \*******************************/
/***/ ((__unused_webpack_module, __webpack_exports__, __webpack_require__) => {

eval("__webpack_require__.r(__webpack_exports__);\n/* harmony export */ __webpack_require__.d(__webpack_exports__, {\n/* harmony export */   NumInput: () => (/* binding */ NumInput)\n/* harmony export */ });\nclass NumInput {\n    base;\n    input;\n    disabled;\n\n    constructor(base, val, disabled = false, onClick = null) {\n        this.base = base;\n        this.disabled = disabled;\n        // construct html framework\n        let input = document.createElement('input');\n        input.classList.add('num-input-input');\n        if (disabled) {\n            input.classList.add('input-disabled');\n        }\n        input.disabled = disabled;\n\n        if (onClick !== null) {\n            this.base.addEventListener('click', onClick);\n        }\n\n        this.input = input;\n        this.input.type = 'number';\n        this.input.required = true;\n        this.input.value = Number(val);\n        base.appendChild(this.input);\n    }\n\n    get() {\n        return Number(this.input.value);\n    }\n\n    set(val) {\n        this.input.value = val;\n    }\n\n    toggleDisable() {\n        this.disabled = !this.disabled;\n        this.input.disabled = this.disabled;\n        if (this.disabled) {\n            this.input.classList.add('input-disabled');\n        } else {\n            this.input.classList.remove('input-disabled');\n        }\n    }\n}\n\n\n//# sourceURL=webpack://physicsim/./src/Input/NumInput.js?");

/***/ }),

/***/ "./src/Input/SliderInput.js":
/*!**********************************!*\
  !*** ./src/Input/SliderInput.js ***!
  \**********************************/
/***/ ((__unused_webpack_module, __webpack_exports__, __webpack_require__) => {

eval("__webpack_require__.r(__webpack_exports__);\n/* harmony export */ __webpack_require__.d(__webpack_exports__, {\n/* harmony export */   SliderInput: () => (/* binding */ SliderInput)\n/* harmony export */ });\nclass SliderInput {\n    base;\n    input;\n    min;\n    max;\n    label;\n    unit;\n    pLabel;\n\n    constructor(base, val, min, max, step, label, unit, update = true) {\n        this.base = base;\n        this.min = min;\n        this.max = max;\n        this.label = label;\n        this.unit = unit;\n\n        let container = document.createElement('div');\n        container.classList.add('slider-input-container');\n\n        this.pLabel = document.createElement('p');\n        if (update) {\n            this.pLabel.innerHTML = `${this.label} = ${val.toFixed(2)} ${this.unit}`;\n        } else {\n            this.pLabel.innerHTML = this.label;\n        }\n\n        this.input = document.createElement('input');\n        this.input.type = 'range';\n        this.input.min = this.min;\n        this.input.max = this.max;\n        this.input.value = val;\n        this.input.step = step;\n        this.input.classList.add('slider-input-slider');\n\n        container.append(this.pLabel, this.input);\n\n        this.base.append(container);\n\n        if (update) {\n            this.input.addEventListener('input', this.update.bind(this));\n        }\n    }\n\n    get() {\n        return parseFloat(this.input.value);\n    }\n\n    set(val) {\n        this.input.value = val;\n    }\n\n    update() {\n        this.pLabel.innerHTML = `${this.label} = ${this.get().toFixed(2)} ${this.unit}`;\n    }\n}\n\n\n//# sourceURL=webpack://physicsim/./src/Input/SliderInput.js?");

/***/ }),

/***/ "./src/Input/ValueInput.js":
/*!*********************************!*\
  !*** ./src/Input/ValueInput.js ***!
  \*********************************/
/***/ ((__unused_webpack_module, __webpack_exports__, __webpack_require__) => {

eval("__webpack_require__.r(__webpack_exports__);\n/* harmony export */ __webpack_require__.d(__webpack_exports__, {\n/* harmony export */   ValueInput: () => (/* binding */ ValueInput)\n/* harmony export */ });\n/* harmony import */ var _NumInput__WEBPACK_IMPORTED_MODULE_0__ = __webpack_require__(/*! ./NumInput */ \"./src/Input/NumInput.js\");\n\n\nclass ValueInput {\n    base;\n    val;\n    label;\n    unit;\n\n    constructor(base, val, label, unit, disabled = false, onClick = null) {\n        this.base = base;\n        this.label = label;\n        this.unit = unit;\n\n        // construct html framework\n        let container = document.createElement('div');\n        container.classList.add('value-input-container');\n\n        let pLabel = document.createElement('p');\n        pLabel.innerHTML = this.label;\n        pLabel.classList.add('value-input-text');\n\n        let pEqual = document.createElement('p');\n        pEqual.innerHTML = '=';\n        pLabel.classList.add('value-input-text');\n\n        let pUnit = document.createElement('p');\n        pUnit.innerHTML = this.unit;\n        pUnit.classList.add('value-input-text');\n\n        container.append(pLabel, pEqual);\n\n        this.val = new _NumInput__WEBPACK_IMPORTED_MODULE_0__.NumInput(container, val, disabled, onClick);\n\n        container.append(pUnit);\n\n        this.base.appendChild(container);\n    }\n\n    get() {\n        return this.val.get();\n    }\n\n    set(val) {\n        this.val.set(val);\n    }\n\n    toggleDisable() {\n        this.val.toggleDisable();\n    }\n}\n\n\n//# sourceURL=webpack://physicsim/./src/Input/ValueInput.js?");

/***/ }),

/***/ "./src/Input/VectorInput.js":
/*!**********************************!*\
  !*** ./src/Input/VectorInput.js ***!
  \**********************************/
/***/ ((__unused_webpack_module, __webpack_exports__, __webpack_require__) => {

eval("__webpack_require__.r(__webpack_exports__);\n/* harmony export */ __webpack_require__.d(__webpack_exports__, {\n/* harmony export */   VectorInput: () => (/* binding */ VectorInput)\n/* harmony export */ });\n/* harmony import */ var _assets_Input_VectorInput_left_vector_bracket_png__WEBPACK_IMPORTED_MODULE_0__ = __webpack_require__(/*! ../assets/Input/VectorInput/left-vector-bracket.png */ \"./src/assets/Input/VectorInput/left-vector-bracket.png\");\n/* harmony import */ var _assets_Input_VectorInput_right_vector_bracket_png__WEBPACK_IMPORTED_MODULE_1__ = __webpack_require__(/*! ../assets/Input/VectorInput/right-vector-bracket.png */ \"./src/assets/Input/VectorInput/right-vector-bracket.png\");\n/* harmony import */ var _NumInput__WEBPACK_IMPORTED_MODULE_2__ = __webpack_require__(/*! ./NumInput */ \"./src/Input/NumInput.js\");\n/* harmony import */ var p5__WEBPACK_IMPORTED_MODULE_3__ = __webpack_require__(/*! p5 */ \"./node_modules/p5/lib/p5.min-exposed.js\");\n/* harmony import */ var p5__WEBPACK_IMPORTED_MODULE_3___default = /*#__PURE__*/__webpack_require__.n(p5__WEBPACK_IMPORTED_MODULE_3__);\n\n\n\n\n\nclass VectorInput {\n    base;\n    x;\n    y;\n    z;\n    label;\n    unit;\n\n    constructor(base, x, y, z, label, unit, disabled = false, onClick = null) {\n        this.base = base;\n        this.label = label;\n        this.unit = unit;\n\n        // construct html framework\n        let container = document.createElement('div');\n        container.classList.add('vector-input-container');\n\n        if (onClick !== null) {\n            container.addEventListener('click', onClick);\n        }\n\n        let pLabel = document.createElement('p');\n        pLabel.innerHTML = `${this.label}`;\n        pLabel.classList.add('vector-input-label');\n\n        let pEqual = document.createElement('p');\n        pEqual.innerHTML = '=';\n        pLabel.classList.add('vector-input-text');\n\n        let pUnit = document.createElement('p');\n        pUnit.innerHTML = unit;\n        pUnit.classList.add('vector-input-text');\n\n        let iLeftBracket = document.createElement('img');\n        let iRightBracket = document.createElement('img');\n        iLeftBracket.classList.add('vector-input-bra');\n        iRightBracket.classList.add('vector-input-bra');\n\n        iLeftBracket.src = _assets_Input_VectorInput_left_vector_bracket_png__WEBPACK_IMPORTED_MODULE_0__;\n        iLeftBracket.draggable = false;\n        iRightBracket.src = _assets_Input_VectorInput_right_vector_bracket_png__WEBPACK_IMPORTED_MODULE_1__;\n        iRightBracket.draggable = false;\n\n        let inContainer = document.createElement('div');\n        inContainer.classList.add('vector-input-in-container');\n\n        this.x = new _NumInput__WEBPACK_IMPORTED_MODULE_2__.NumInput(inContainer, x, disabled);\n        this.y = new _NumInput__WEBPACK_IMPORTED_MODULE_2__.NumInput(inContainer, y, disabled);\n        this.z = new _NumInput__WEBPACK_IMPORTED_MODULE_2__.NumInput(inContainer, z, disabled);\n\n        container.append(\n            pLabel,\n            pEqual,\n            iLeftBracket,\n            inContainer,\n            iRightBracket,\n            pUnit,\n        );\n\n        base.appendChild(container);\n    }\n\n    get() {\n        return new (p5__WEBPACK_IMPORTED_MODULE_3___default().Vector)(this.x.get(), -this.z.get(), this.y.get());\n    }\n\n    set(x, y, z) {\n        this.x.set(x);\n        this.y.set(y);\n        this.z.set(z);\n    }\n\n    toggleDisable() {\n        this.x.toggleDisable();\n        this.y.toggleDisable();\n        this.z.toggleDisable();\n    }\n}\n\n\n//# sourceURL=webpack://physicsim/./src/Input/VectorInput.js?");

/***/ }),

/***/ "./src/Simulations/CollisionsSimulation.js":
/*!*************************************************!*\
  !*** ./src/Simulations/CollisionsSimulation.js ***!
  \*************************************************/
/***/ ((__unused_webpack_module, __webpack_exports__, __webpack_require__) => {

eval("__webpack_require__.r(__webpack_exports__);\n/* harmony export */ __webpack_require__.d(__webpack_exports__, {\n/* harmony export */   \"default\": () => (/* binding */ CollisionsSimulation)\n/* harmony export */ });\n/* harmony import */ var _ThreeDSimulation__WEBPACK_IMPORTED_MODULE_0__ = __webpack_require__(/*! ./ThreeDSimulation */ \"./src/Simulations/ThreeDSimulation.js\");\n/* harmony import */ var _Input_ValueInput__WEBPACK_IMPORTED_MODULE_1__ = __webpack_require__(/*! ../Input/ValueInput */ \"./src/Input/ValueInput.js\");\n/* harmony import */ var _Input_VectorInput__WEBPACK_IMPORTED_MODULE_2__ = __webpack_require__(/*! ../Input/VectorInput */ \"./src/Input/VectorInput.js\");\n/* harmony import */ var _Input_SliderInput__WEBPACK_IMPORTED_MODULE_3__ = __webpack_require__(/*! ../Input/SliderInput */ \"./src/Input/SliderInput.js\");\n/* harmony import */ var _Controls_Button__WEBPACK_IMPORTED_MODULE_4__ = __webpack_require__(/*! ../Controls/Button */ \"./src/Controls/Button.js\");\n/* harmony import */ var chart_js_auto__WEBPACK_IMPORTED_MODULE_5__ = __webpack_require__(/*! chart.js/auto */ \"./node_modules/chart.js/auto/auto.js\");\n/* harmony import */ var p5__WEBPACK_IMPORTED_MODULE_6__ = __webpack_require__(/*! p5 */ \"./node_modules/p5/lib/p5.min-exposed.js\");\n/* harmony import */ var p5__WEBPACK_IMPORTED_MODULE_6___default = /*#__PURE__*/__webpack_require__.n(p5__WEBPACK_IMPORTED_MODULE_6__);\n\n\n\n\n\n\n\n\nclass CollisionsSimulation extends _ThreeDSimulation__WEBPACK_IMPORTED_MODULE_0__.ThreeDSimulation {\n    size = 10;\n    e = 1;\n    sf = 10;\n\n    constructor(container, inputs, graphs, controls, attributes) {\n        super(container, inputs, graphs, controls, attributes);\n\n        // add inputs\n        this.massA = new _Input_ValueInput__WEBPACK_IMPORTED_MODULE_1__.ValueInput(this.inputWrapper, 0.5, 'mass of A', 'kg');\n        this.massB = new _Input_ValueInput__WEBPACK_IMPORTED_MODULE_1__.ValueInput(this.inputWrapper, 1, 'mass of B', 'kg');\n\n        this.velA = new _Input_VectorInput__WEBPACK_IMPORTED_MODULE_2__.VectorInput(\n            this.inputWrapper,\n            2.5,\n            0,\n            0,\n            'v<sub>A</sub>',\n            'm/s',\n        );\n        this.velB = new _Input_VectorInput__WEBPACK_IMPORTED_MODULE_2__.VectorInput(\n            this.inputWrapper,\n            -2.5,\n            0,\n            0,\n            'v<sub>B</sub>',\n            'm/s',\n        );\n\n        this.posA = new _Input_VectorInput__WEBPACK_IMPORTED_MODULE_2__.VectorInput(\n            this.inputWrapper,\n            -20,\n            0,\n            0,\n            's<sub>A</sub>',\n            'm',\n        );\n        this.posB = new _Input_VectorInput__WEBPACK_IMPORTED_MODULE_2__.VectorInput(\n            this.inputWrapper,\n            20,\n            0,\n            0,\n            's<sub>B</sub>',\n            'm',\n        );\n\n        this.sizeInput = new _Input_SliderInput__WEBPACK_IMPORTED_MODULE_3__.SliderInput(\n            this.inputWrapper,\n            this.size,\n            5,\n            100,\n            1,\n            'Simulation Size',\n            'm',\n        );\n        this.eInput = new _Input_SliderInput__WEBPACK_IMPORTED_MODULE_3__.SliderInput(\n            this.inputWrapper,\n            1,\n            0,\n            1,\n            0.01,\n            'Coeffecient of Restitution Between Particles',\n            '',\n        );\n\n        // init data and graphs\n        this.data = {};\n        this.xGraph = this.makeGraph();\n        this.yGraph = this.makeGraph();\n        this.zGraph = this.makeGraph();\n        this.xChart = this.initChart(\n            this.xGraph,\n            'Momentum (x) in System',\n            'kg/ms⁻¹',\n        );\n        this.yChart = this.initChart(\n            this.yGraph,\n            'Momentum (y) in System',\n            'kg/ms⁻¹',\n        );\n        this.zChart = this.initChart(\n            this.zGraph,\n            'Momentum (z) in System',\n            'kg/ms⁻¹',\n        );\n    }\n\n    init(p) {\n        // add custom btns\n        this.downloadBtn = new _Controls_Button__WEBPACK_IMPORTED_MODULE_4__.Button(\n            this.controlWrapper,\n            this.download.bind(this),\n            'Data',\n        );\n\n        // init data\n        this.data.particles = [];\n        this.data.x = [];\n        this.data.y = [];\n        this.data.z = [];\n        this.start = p.millis();\n\n        // get e input\n        this.e = this.eInput.get();\n\n        // get size input\n        this.size = this.sizeInput.get() * this.sf;\n\n        // init particles\n        this.particleA = new Particle(\n            Math.abs(this.massA.get()),\n            this.posA.get(),\n            this.velA.get(),\n            166,\n            189,\n            111,\n        );\n        this.particleB = new Particle(\n            Math.abs(this.massB.get()),\n            this.posB.get(),\n            this.velB.get(),\n            156,\n            98,\n            112,\n        );\n    }\n\n    frame(p) {\n        p.ambientLight(200);\n\n        p.background(0);\n\n        if (this.rotateControl) {\n            p.orbitControl();\n        }\n\n        p.perspective(0.4, this.width / this.height, 10, 500000);\n        p.push();\n        p.stroke(255, 255, 255, 75);\n        p.line(-this.size, 0, 0, this.size, 0, 0);\n        p.line(0, -this.size, 0, 0, this.size, 0);\n        p.line(0, 0, -this.size, 0, 0, this.size);\n        p.pop();\n\n        // update particles based on playing state\n        if (!this.paused) {\n            this.particleA.collide(this.particleB, this.e);\n\n            this.particleA.update(p, this.sf);\n            this.particleB.update(p, this.sf);\n\n            this.particleA.edges(this.size);\n            this.particleB.edges(this.size);\n        }\n\n        this.particleA.show(p);\n        this.particleB.show(p);\n\n        // end simulation when velocity < 0.001\n        if (\n            this.particleA.velocity.mag().toFixed(2) == 0 &&\n            this.particleB.velocity.mag().toFixed(2) == 0\n        ) {\n            this.paused = true;\n        }\n\n        // add data\n        this.data.particles = ['A', 'B', 'Total'];\n        this.data.x[0] = this.particleA.velocity.x * this.particleA.mass;\n        this.data.x[1] = this.particleB.velocity.x * this.particleB.mass;\n        this.data.x[2] = this.data.x[0] + this.data.x[1];\n\n        this.data.y[0] = this.particleA.velocity.z * -1 * this.particleA.mass;\n        this.data.y[1] = this.particleB.velocity.z * -1 * this.particleB.mass;\n        this.data.y[2] = this.data.y[0] + this.data.y[1];\n\n        this.data.z[0] = this.particleA.velocity.y * this.particleA.mass;\n        this.data.z[1] = this.particleB.velocity.y * this.particleB.mass;\n        this.data.z[2] = this.data.z[0] + this.data.z[1];\n\n        if (this.selected == 'graphs') {\n            this.graph();\n        }\n\n        this.updateAttributes();\n    }\n\n    graph() {\n        if (this.paused) return;\n\n        // update datasets\n        this.updateChart(this.xChart, this.data.particles, this.data.x);\n        this.updateChart(this.yChart, this.data.particles, this.data.y);\n        this.updateChart(this.zChart, this.data.particles, this.data.z);\n    }\n\n    initChart(canvas, title, yLabel) {\n        return new chart_js_auto__WEBPACK_IMPORTED_MODULE_5__[\"default\"](canvas, {\n            type: 'bar',\n            data: {\n                labels: [], // time data\n                datasets: [\n                    {\n                        label: title,\n                        data: [],\n                        borderColor: '#6c46cc',\n                        borderWidth: 1,\n                        backgroundColor: '#6c46cc',\n                    },\n                ],\n            },\n            options: {\n                responsive: true,\n                maintainAspectRatio: true,\n                animation: false,\n                scales: {\n                    x: {\n                        title: {\n                            display: true,\n                            text: 'Particle',\n                            font: { family: 'CMUSerifRoman', size: 14 },\n                        },\n                    },\n                    y: {\n                        title: {\n                            display: true,\n                            text: yLabel,\n                            font: { family: 'CMUSerifRoman', size: 14 },\n                        },\n                    },\n                },\n                plugins: {\n                    title: {\n                        display: true,\n                        text: title,\n                        font: { family: 'CMUSerifRoman', size: 16 },\n                        color: '#fff',\n                    },\n                    legend: { display: false },\n                },\n                layout: { padding: { right: 0 } },\n                backgroundColor: '#1e1e1e',\n                color: '#fff',\n            },\n        });\n    }\n\n    updateChart(chart, labels, data) {\n        chart.data.labels = labels;\n        chart.data.datasets[0].data = data;\n        chart.update();\n    }\n\n    download() {\n        let collisions = this.particleA.collisions;\n        let headers =\n            'pax, pbx, pay, pby, paz, pbz, pax\\', pbx\\', pay\\', pby\\', paz\\', pbz\\'\\n';\n        let strData = collisions.map((row) => row.join(',')).join('\\n');\n        let csvData = headers.concat(strData);\n        let blob = new Blob([csvData], { type: 'text/csv' });\n        let url = window.URL.createObjectURL(blob);\n\n        let a = document.createElement('a');\n        a.setAttribute('hidden', '');\n        a.setAttribute('href', url);\n        a.setAttribute('download', 'data.csv');\n        document.body.appendChild(a);\n        a.click();\n        document.body.removeChild(a);\n    }\n\n    updateAttributes() {\n        this.attributeWrapper.innerHTML = `\n\t\t\tv[a] (x) = ${this.particleA.velocity.x.toFixed(2)} m/s <br>\n\t\t\tv[a] (y) = ${this.particleA.velocity.z.toFixed(2)} m/s <br>\n\t\t\tv[a] (z) = ${-this.particleA.velocity.y.toFixed(2)} m/s <br>\n\t\t\tv[b] (x) = ${this.particleB.velocity.x.toFixed(2)} m/s <br>\n\t\t\tv[b] (y) = ${this.particleB.velocity.z.toFixed(2)} m/s <br>\n\t\t\tv[b] (z) = ${-this.particleB.velocity.y.toFixed(2)} m/s <br>\n\t  \t`;\n    }\n}\n\nclass Particle {\n    constructor(mass, pos, vel, r, g, b) {\n        this.position = pos;\n        this.velocity = vel;\n        this.acceleration = new (p5__WEBPACK_IMPORTED_MODULE_6___default().Vector)(0, 0, 0);\n        this.mass = mass;\n        this.r = Math.sqrt(this.mass) * 10;\n        this.colR = r;\n        this.colG = g;\n        this.colB = b;\n        this.collisions = [];\n    }\n\n    collide(p, e) {\n        // check if collision is to occur\n        if (p5__WEBPACK_IMPORTED_MODULE_6___default().Vector.dist(this.position, p.position) <= this.r + p.r) {\n            // collision will occur\n            let m1 = this.mass;\n            let m2 = p.mass;\n\n            let v1 = this.velocity;\n            let v2 = p.velocity;\n\n            // delcare vectors normal and tangental to line of collision\n            let n = p5__WEBPACK_IMPORTED_MODULE_6___default().Vector.sub(p.position, this.position).normalize();\n\n            // resolve velocities in n\n            let v1n = p5__WEBPACK_IMPORTED_MODULE_6___default().Vector.dot(v1, n);\n            let v2n = p5__WEBPACK_IMPORTED_MODULE_6___default().Vector.dot(v2, n);\n\n            let v1nv = p5__WEBPACK_IMPORTED_MODULE_6___default().Vector.mult(n, v1n);\n            let v2nv = p5__WEBPACK_IMPORTED_MODULE_6___default().Vector.mult(n, v2n);\n\n            // subtract original normal velocities\n            let v1p = p5__WEBPACK_IMPORTED_MODULE_6___default().Vector.sub(v1, v1nv);\n            let v2p = p5__WEBPACK_IMPORTED_MODULE_6___default().Vector.sub(v2, v2nv);\n\n            // computer velocities after\n            let v1np =\n                (m1 * v1n - m2 * e * v1n + m2 * v2n + m2 * e * v2n) / (m1 + m2);\n            let v2np =\n                (m2 * v2n - m1 * e * v2n + m1 * v1n + m1 * e * v1n) / (m1 + m2);\n\n            // add new normal velocities\n            let v1npv = p5__WEBPACK_IMPORTED_MODULE_6___default().Vector.mult(n, v1np);\n            let v2npv = p5__WEBPACK_IMPORTED_MODULE_6___default().Vector.mult(n, v2np);\n\n            v1p.add(v1npv);\n            v2p.add(v2npv);\n\n            this.velocity = v1p;\n            p.velocity = v2p;\n        }\n    }\n\n    update(p, sf) {\n        this.velocity.add(this.acceleration);\n        this.position.add(\n            p5__WEBPACK_IMPORTED_MODULE_6___default().Vector.mult(this.velocity, (1 / p.getTargetFrameRate()) * sf),\n        );\n        this.acceleration.mult(0);\n    }\n\n    edges(size) {\n        if (this.position.x > size) {\n            this.velocity.x *= -1;\n            this.position.x = size;\n        } else if (this.position.x < -size) {\n            this.velocity.x *= -1;\n            this.position.x = -size;\n        }\n\n        if (this.position.y > size) {\n            this.velocity.y *= -1;\n            this.position.y = size;\n        } else if (this.position.y < -size) {\n            this.velocity.y *= -1;\n            this.position.y = -size;\n        }\n\n        if (this.position.z > size) {\n            this.velocity.z *= -1;\n            this.position.z = size;\n        } else if (this.position.z < -size) {\n            this.velocity.z *= -1;\n            this.position.z = -size;\n        }\n    }\n\n    show(p) {\n        p.push();\n        p.strokeWeight(0.5);\n        p.fill(this.colR, this.colG, this.colB);\n        p.translate(this.position.x, this.position.y, this.position.z);\n        p.noStroke();\n        p.sphere(this.r, 24, 24);\n        p.pop();\n    }\n}\n\n\n//# sourceURL=webpack://physicsim/./src/Simulations/CollisionsSimulation.js?");

/***/ }),

/***/ "./src/assets/Input/VectorInput/left-vector-bracket.png":
/*!**************************************************************!*\
  !*** ./src/assets/Input/VectorInput/left-vector-bracket.png ***!
  \**************************************************************/
/***/ ((module, __unused_webpack_exports, __webpack_require__) => {

eval("module.exports = __webpack_require__.p + \"assets/16879877791fff2b8023.png\";\n\n//# sourceURL=webpack://physicsim/./src/assets/Input/VectorInput/left-vector-bracket.png?");

/***/ }),

/***/ "./src/assets/Input/VectorInput/right-vector-bracket.png":
/*!***************************************************************!*\
  !*** ./src/assets/Input/VectorInput/right-vector-bracket.png ***!
  \***************************************************************/
/***/ ((module, __unused_webpack_exports, __webpack_require__) => {

eval("module.exports = __webpack_require__.p + \"assets/572218783a3b36e807cb.png\";\n\n//# sourceURL=webpack://physicsim/./src/assets/Input/VectorInput/right-vector-bracket.png?");

/***/ })

}]);